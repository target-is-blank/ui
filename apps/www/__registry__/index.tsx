/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.mts
// Do not edit this file directly.
import * as React from "react";

export const index: Record<string, any> = {
  index: {
    name: "index",
    description: "",
    type: "registry:style",
    dependencies: [
      "tw-animate-css",
      "class-variance-authority",
      "lucide-react",
    ],
    devDependencies: undefined,
    registryDependencies: ["utils"],
    files: [],
    keywords: [],
    component: null,
    command: "https://targetblank.dev/r/index",
  },
  transfer: {
    name: "transfer",
    description: "A transfer animation.",
    type: "registry:ui",
    dependencies: [
      "motion",
      "lucide-react",
      "class-variance-authority",
      "react-particles-js",
    ],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/animations/transfer.tsx",
        content:
          '"use client";\n\nimport { cn } from "@/lib/utils";\nimport React, { ReactElement, useEffect, useRef, useState } from "react";\n\nexport interface TransferProps {\n  animation?: boolean;\n  color?: string[];\n  containerClassName?: string;\n  containerHeight?: number;\n  containerWidth?: string;\n  direction?: "right" | "left";\n  delay?: number;\n  duration?: {\n    min: number;\n    max: number;\n  };\n  firstChild: React.ReactNode;\n  maxCurve?: number;\n  opacity?: number;\n  secondChild: React.ReactNode;\n  size?: {\n    min: number;\n    max: number;\n  };\n  speed?: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface Particle {\n  id: number;\n  element: ReactElement;\n  timeoutId: ReturnType<typeof setTimeout>;\n}\n\nfunction randomBetween(a: number, b: number) {\n  return a + Math.random() * (b - a);\n}\n\nfunction getWidthPx(width: string, parentPx = 600): number {\n  if (width.endsWith("px")) return parseFloat(width);\n  if (width.endsWith("%")) return (parseFloat(width) / 100) * parentPx;\n\n  return parseFloat(width) || parentPx;\n}\n\nfunction Transfer({\n  animation = true,\n  color = ["#000"],\n  containerClassName,\n  containerHeight = 40,\n  containerWidth = "100%",\n  delay = 40,\n  direction = "right",\n  duration = { min: 1.2, max: 1.8 },\n  firstChild,\n  maxCurve = 18,\n  opacity = 1,\n  secondChild,\n  size = { min: 6, max: 12 },\n  speed = { min: 0, max: 1.2 },\n}: TransferProps) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const particleId = useRef(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [measuredWidth, setMeasuredWidth] = useState<number>(\n    getWidthPx(containerWidth),\n  );\n\n  useEffect(() => {\n    function updateWidth() {\n      if (containerRef.current) {\n        setMeasuredWidth(containerRef.current.getBoundingClientRect().width);\n      }\n    }\n    updateWidth();\n    window.addEventListener("resize", updateWidth);\n    return () => window.removeEventListener("resize", updateWidth);\n  }, [containerWidth]);\n\n  useEffect(() => {\n    if (animation) {\n      intervalRef.current = setInterval(() => {\n        const randomSize = randomBetween(size.min, size.max);\n        const generatedMaxCurve = Math.min(\n          maxCurve,\n          (containerHeight - randomSize) / 2,\n        );\n        const randomCurve = randomBetween(\n          -generatedMaxCurve,\n          generatedMaxCurve,\n        );\n        const minTop = Math.max(0, -randomCurve) + 1;\n        const maxTop =\n          Math.min(\n            containerHeight - randomSize,\n            containerHeight - randomSize - randomCurve,\n          ) - 1;\n        const startY = randomBetween(minTop, maxTop);\n        const randomDelay = randomBetween(speed.min, speed.max);\n        const randomDuration = randomBetween(duration.min, duration.max);\n        const randomColor = Math.floor(randomBetween(0, color.length));\n        const id = particleId.current++;\n\n        const style: Record<string, unknown> = {\n          backgroundColor: color[randomColor],\n          opacity,\n          width: `${randomSize}px`,\n          height: `${randomSize}px`,\n          animation: `particle-transfer-${direction} ${randomDuration}s cubic-bezier(.7,.2,.3,1) ${randomDelay}s 1`,\n          ["--curve"]: `${randomCurve}px`,\n        };\n        if (direction === "right") {\n          style.left = 0;\n          style.top = `${startY}px`;\n        } else if (direction === "left") {\n          style.left = `calc(100% - ${randomSize}px)`;\n          style.top = `${startY}px`;\n        }\n\n        const timeoutId = setTimeout(\n          () => {\n            setParticles((prev) => prev.filter((p) => p.id !== id));\n          },\n          (randomDelay + randomDuration) * 1000,\n        );\n\n        const element = (\n          <div\n            key={id}\n            className="absolute rounded-full opacity-70"\n            style={style}\n          />\n        );\n        setParticles((prev) => [...prev, { id, element, timeoutId }]);\n      }, delay);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [\n    containerHeight,\n    speed.max,\n    speed.min,\n    duration.max,\n    duration.min,\n    animation,\n    maxCurve,\n    size.max,\n    size.min,\n    color,\n    opacity,\n    direction,\n    delay,\n    measuredWidth,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      setParticles((prev) => {\n        prev.forEach((p) => clearTimeout(p.timeoutId));\n        return [];\n      });\n    };\n  }, []);\n\n  const getKeyframes = () => {\n    switch (direction) {\n      case "right":\n        return `\n          @keyframes particle-transfer-right {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      case "left":\n        return `\n          @keyframes particle-transfer-left {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(-${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(-${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      default:\n        return "";\n    }\n  };\n\n  return (\n    <>\n      <style>{getKeyframes()}</style>\n      <div\n        className={cn(\n          "flex items-center justify-between relative z-10",\n          containerClassName,\n        )}\n        style={{ width: containerWidth }}\n        ref={containerRef}\n      >\n        {firstChild}\n\n        <div\n          className="absolute left-0 top-0 w-full h-10 rounded-md overflow-hidden pointer-events-none"\n          style={{ width: containerWidth }}\n        >\n          {particles.map((p) => p.element)}\n        </div>\n\n        {secondChild}\n      </div>\n    </>\n  );\n}\n\nexport default Transfer;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/animations/transfer/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer",
  },
  "particles-background": {
    name: "particles-background",
    description: "A background with a particles animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/backgrounds/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/backgrounds/particles.tsx",
        content:
          'import { motion } from "motion/react";\nimport * as React from "react";\n\ninterface ParticlesBackgroundProps extends React.ComponentProps<"div"> {\n  color?: string;\n  count?: number;\n}\n\nconst ParticlesBackground = ({\n  color = "white",\n  count = 18,\n  ...props\n}: ParticlesBackgroundProps) => {\n  const [particles, setParticles] = React.useState<\n    {\n      top: number;\n      left: number;\n      size: number;\n      opacity: number;\n      delay: number;\n    }[]\n  >([]);\n\n  React.useEffect(() => {\n    setParticles(\n      Array.from({ length: count }).map(() => ({\n        top: Math.random() * 100,\n        left: Math.random() * 100,\n        size: 2 + Math.random() * 3,\n        opacity: 0.3 + Math.random() * 0.4,\n        delay: Math.random() * 2,\n      })),\n    );\n  }, [count]);\n\n  return (\n    <div\n      aria-hidden\n      className="absolute inset-0 z-0 pointer-events-none"\n      style={{ overflow: "hidden" }}\n      {...props}\n    >\n      {particles.map((p, i) => (\n        <motion.span\n          key={i}\n          className="absolute rounded-full"\n          style={{\n            top: `${p.top}%`,\n            left: `${p.left}%`,\n            width: `${p.size}px`,\n            height: `${p.size}px`,\n            opacity: p.opacity,\n            filter: "blur(0.5px)",\n            background: color,\n          }}\n          animate={{\n            y: [0, -8, 0],\n            opacity: [p.opacity, p.opacity * 0.7, p.opacity],\n          }}\n          transition={{\n            duration: 2.5 + Math.random() * 1.5,\n            repeat: Infinity,\n            delay: p.delay,\n            repeatType: "loop",\n            ease: "easeInOut",\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ParticlesBackground;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/backgrounds/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-background";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-background",
  },
  "speed-background": {
    name: "speed-background",
    description: "A background with a speed animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/backgrounds/speed/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/backgrounds/speed.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\ninterface SpeedBackgroundProps extends React.ComponentProps<"div"> {\n  count?: number;\n  color?: string;\n  className?: string;\n}\n\nconst SpeedBackground = ({\n  count = 80,\n  color = "black",\n  className,\n  ...props\n}: SpeedBackgroundProps) => {\n  const [lines, setLines] = React.useState<\n    {\n      angle: number;\n      length: number;\n      thickness: number;\n      opacity: number;\n    }[]\n  >([]);\n\n  React.useEffect(() => {\n    setLines(\n      Array.from({ length: count }).map(() => ({\n        angle: Math.random() * 360,\n        length: 500 + Math.random() * 500,\n        thickness: 5 + Math.random() * 15,\n        opacity: 0.1 + Math.random() * 0.5,\n      })),\n    );\n  }, [count]);\n\n  return (\n    <div\n      aria-hidden\n      className={cn(\n        "pointer-events-none absolute inset-0 z-0 overflow-hidden w-full h-full",\n        className,\n      )}\n      {...props}\n    >\n      <div className="absolute left-1/2 top-1/2">\n        {lines.map((line, i) => (\n          <motion.div\n            key={i}\n            className="absolute"\n            style={{\n              transform: `rotate(${line.angle}deg)`,\n              width: `${line.length}px`,\n              height: `${line.thickness}px`,\n              opacity: line.opacity,\n              backgroundColor: color,\n              transformOrigin: "0% 50%",\n              clipPath: "polygon(0% 50%, 100% 0%, 100% 100%)",\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedBackground;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/backgrounds/speed/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "speed-background";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/speed-background",
  },
  "copy-button": {
    name: "copy-button",
    description: "A button with a copy to clipboard animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/copy.tsx",
        content:
          '"use client";\n\nimport { cva, type VariantProps } from "class-variance-authority";\nimport { CheckIcon, CopyIcon } from "lucide-react";\nimport { AnimatePresence, HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nconst buttonVariants = cva(\n  "inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",\n  {\n    variants: {\n      variant: {\n        default:\n          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",\n        muted: "bg-muted text-muted-foreground",\n        destructive:\n          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",\n        outline:\n          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",\n        secondary:\n          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",\n        ghost:\n          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",\n      },\n      size: {\n        default: "size-8 rounded-lg [&_svg]:size-4",\n        sm: "size-6 [&_svg]:size-3",\n        md: "size-10 rounded-lg [&_svg]:size-5",\n        lg: "size-12 rounded-xl [&_svg]:size-6",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "default",\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<"button">, "children" | "onCopy"> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error("Error copying command", error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot="copy-button"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode="wait">\n        <motion.span\n          key={localIsCopied ? "check" : "copy"}\n          data-slot="copy-button-icon"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { buttonVariants, CopyButton, type CopyButtonProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button",
  },
  "particles-button": {
    name: "particles-button",
    description: "A button with a particles animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/particles.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\nimport { cn } from "@/lib/utils";\n\nconst DEFAULT_COMPONENT = "button";\n\ntype ParticlesButtonProps<\n  T extends React.ElementType = typeof DEFAULT_COMPONENT,\n> = {\n  as?: T;\n  color?: string;\n  count?: number;\n} & React.ComponentProps<T>;\n\nconst ParticlesButton = <\n  T extends React.ElementType = typeof DEFAULT_COMPONENT,\n>({\n  as,\n  className,\n  color = "white",\n  count = 18,\n  ...props\n}: ParticlesButtonProps<T>) => {\n  const Comp = as || DEFAULT_COMPONENT;\n\n  return (\n    <Comp\n      className={cn(\n        "flex overflow-hidden relative z-10 items-center w-full h-full text-sm text-center text-gray-700 shadow-[inset_0px_0px_2px_0px_#FFFFFF]",\n        className,\n      )}\n      {...props}\n    >\n      <ParticlesBackground color={color} count={count} />\n      {props.children}\n    </Comp>\n  );\n};\n\nexport default ParticlesButton;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-button",
  },
  card: {
    name: "card",
    description: "A card component.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/card/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/card.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\nimport { useRef, useState } from "react";\n\nconst DEFAULT_COMPONENT = "button";\n\ntype CardProps = HTMLMotionProps<"div"> & {\n  image: string;\n};\n\nfunction Card({ className, image, ...props }: CardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [pos, setPos] = useState({ x: 0, y: 0 });\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const card = cardRef.current;\n    if (!card) return;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left - rect.width / 2;\n    const y = e.clientY - rect.top - rect.height / 2;\n    const strength = 0.08;\n    setPos({ x: x * strength, y: y * strength });\n  };\n\n  const handleMouseLeave = () => {\n    setPos({ x: 0, y: 0 });\n  };\n\n  return (\n    <div\n      data-slot="card"\n      className="flex justify-center items-center p-2 rounded-3xl shadow-sm bg-white/20 backdrop-blur-xs"\n    >\n      <motion.div\n        ref={cardRef}\n        className={cn(\n          "relative w-[300px] bg-cover bg-center flex flex-col gap-4 p-6 rounded-2xl shadow-[inset_0px_0px_3px_0px_#FFFFFF]",\n          className,\n        )}\n        style={{\n          backgroundImage: `url(${image})`,\n        }}\n        animate={{ x: pos.x, y: pos.y }}\n        transition={{ type: "spring", stiffness: 400, damping: 40, mass: 1 }}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CardGradient({\n  className,\n  fromBlur = 40,\n  fromColor = "rgba(255, 255, 255, 0.5)",\n  fromOpacity = 40,\n  toBlur = 70,\n  toColor = "rgba(0, 0, 0, 0)",\n  toOpacity = 70,\n  ...props\n}: React.ComponentProps<"div"> & {\n  fromBlur?: number;\n  toBlur?: number;\n  fromColor?: string;\n  toColor?: string;\n  fromOpacity?: number;\n  toOpacity?: number;\n}) {\n  return (\n    <div\n      className={cn(\n        "absolute inset-0 rounded-2xl backdrop-blur-xl pointer-events-none",\n        className,\n      )}\n      style={{\n        background: `linear-gradient(to bottom, ${fromColor} ${fromOpacity}%, ${toColor} ${toOpacity}%)`,\n        mask: `linear-gradient(to bottom, rgba(0, 0, 0, 1) ${fromBlur.toString()}%, rgba(0, 0, 0, 0) ${toBlur.toString()}%)`,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CardIndicator({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-indicator"\n      className={cn(\n        "rounded-full border border-gray-200 bg-white/30 backdrop-blur-xs w-fit",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-header"\n      className={cn(\n        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-1 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-title"\n      className={cn("font-semibold leading-none", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-description"\n      className={cn("text-sm text-muted-foreground", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-content"\n      className={cn("px-1", className)}\n      {...props}\n    />\n  );\n}\n\ntype CardFooterProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> = {\n  as?: T;\n  radius?: number;\n  blur?: number;\n  childClassName?: string;\n} & React.ComponentProps<T>;\n\nfunction CardFooter<T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  as,\n  className,\n  ...props\n}: CardFooterProps<T>) {\n  const Comp = as || DEFAULT_COMPONENT;\n\n  return (\n    <motion.div\n      data-slot="card-footer"\n      className="flex overflow-hidden relative justify-center items-center p-1 mt-20 rounded-xl backdrop-blur-sm bg-white/20 shadow-[inset_0px_0px_2px_0px_#FFFFFF]"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <Comp\n        className={cn(\n          "flex overflow-hidden relative z-10 items-center w-full h-full text-sm text-center text-gray-700 shadow-[inset_0px_0px_2px_0px_#FFFFFF]",\n          className,\n        )}\n        {...props}\n      >\n        {props.children}\n      </Comp>\n    </motion.div>\n  );\n}\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardGradient,\n  CardHeader,\n  CardIndicator,\n  CardTitle,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/card/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "card";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/card",
  },
  "loading-bar": {
    name: "loading-bar",
    description: "A loading bar with a gradient background.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/loading-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/loading-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { CheckCircleIcon } from "lucide-react";\nimport { AnimatePresence, motion } from "motion/react";\n\ninterface LoadingBarProps {\n  color?: string;\n  completed?: boolean;\n  finishedComponentClassName?: string;\n  finishedComponent?: React.ReactNode;\n  indicator?: string;\n  loadingClassName?: string;\n  progress: number;\n}\n\nconst LoadingBar = ({\n  color = "#000",\n  completed = false,\n  finishedComponentClassName,\n  finishedComponent,\n  indicator,\n  loadingClassName,\n  progress,\n}: LoadingBarProps) => {\n  return (\n    <div className="relative w-full h-full">\n      <AnimatePresence mode="wait">\n        {!completed ? (\n          <>\n            <div\n              key="bar"\n              className="relative w-full h-2 bg-gray-200 rounded-full dark:bg-gray-800"\n            >\n              <motion.div\n                initial={{ width: 0 }}\n                animate={{ width: `${progress}%` }}\n                className="h-full rounded-full transition-all duration-300"\n                style={{ background: color }}\n              />\n              <span\n                className={cn(\n                  "absolute top-0 right-0 z-10 text-xs font-medium text-black -translate-y-full",\n                  loadingClassName,\n                )}\n              >\n                {progress}%\n              </span>\n            </div>\n            {indicator && (\n              <span className="mt-1 text-xs text-gray-400">{indicator}</span>\n            )}\n          </>\n        ) : (\n          <motion.div\n            key="icon"\n            initial={{ opacity: 0, scale: 0.8, y: 10, rotate: 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0, rotate: 360 }}\n            exit={{ opacity: 0, scale: 0.8, y: -10, rotate: 0 }}\n            transition={{\n              type: "spring",\n              stiffness: 260,\n              damping: 20,\n              duration: 1,\n            }}\n            className={cn(\n              "flex justify-center items-center",\n              finishedComponentClassName,\n            )}\n          >\n            {finishedComponent || <CheckCircleIcon className="size-6" />}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default LoadingBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/loading-bar/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "loading-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/loading-bar",
  },
  "step-bar": {
    name: "step-bar",
    description: "A step bar with a gradient background.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/step-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { AnimatePresence, motion } from "motion/react";\nimport * as React from "react";\n\nconst DEFAULT_COMPONENT = "div";\n\ninterface StepBarProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> {\n  color?: string;\n  containerClassName?: string;\n  currentStep: number;\n  finished?: boolean;\n  lastStepVisible?: boolean;\n  onCurrentStepHover?: (index: number) => void;\n  onCurrentStepLeave?: () => void;\n  onStepHover?: (index: number) => void;\n  onStepLeave?: () => void;\n  tooltipClassName?: string;\n  tooltipContent?: (index: number) => string;\n  tooltipKeepVisible?: boolean;\n  size?: "sm" | "md" | "lg";\n  steps: number;\n  stepClassName?: string;\n  stepComponent?: T;\n}\n\nconst StepBar = <T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  color = "#000",\n  containerClassName,\n  currentStep,\n  finished = false,\n  lastStepVisible = true,\n  onCurrentStepHover,\n  onCurrentStepLeave,\n  onStepHover,\n  onStepLeave,\n  tooltipClassName,\n  tooltipContent,\n  tooltipKeepVisible = false,\n  size = "md",\n  steps,\n  stepClassName,\n  stepComponent,\n  ...props\n}: StepBarProps<T>) => {\n  const Component = stepComponent || DEFAULT_COMPONENT;\n\n  const [isTooltipVisible, setIsTooltipVisible] =\n    React.useState(tooltipKeepVisible);\n  const isFinished = React.useMemo(\n    () => finished || currentStep > steps,\n    [finished, currentStep, steps],\n  );\n\n  const getStepColor = React.useCallback(\n    (currentStep: number, index: number, color: string) => {\n      if (isFinished) return { opacity: 1, color };\n\n      if (currentStep < index + 1) {\n        return {\n          opacity: 0.2,\n          color: lastStepVisible ? color : "transparent",\n        };\n      }\n      if (currentStep === index + 1) {\n        return { opacity: 0.5, color };\n      }\n      return { opacity: 1, color };\n    },\n    [isFinished, lastStepVisible],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (index: number, currentStep: number) => {\n      onStepHover?.(index);\n\n      if (isFinished && steps - 1 === index) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n        return;\n      }\n\n      if (index + 1 === currentStep && !isFinished) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n      }\n    },\n    [isFinished, onCurrentStepHover, onStepHover, steps],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (index: number) => {\n      if (!tooltipKeepVisible) {\n        setIsTooltipVisible(false);\n        onStepLeave?.();\n      }\n\n      if (currentStep === index + 1 && !isFinished) {\n        onCurrentStepLeave?.();\n      }\n    },\n    [\n      tooltipKeepVisible,\n      currentStep,\n      isFinished,\n      onStepLeave,\n      onCurrentStepLeave,\n    ],\n  );\n\n  const displayTooltipText = React.useCallback(\n    (index: number) => {\n      if (tooltipContent) return tooltipContent(index);\n\n      if (index === 0) {\n        return "Start";\n      }\n      if (index > steps || isFinished) {\n        return "End";\n      }\n      return `Step ${index + 1}`;\n    },\n    [isFinished, steps, tooltipContent],\n  );\n\n  return (\n    <div\n      className={cn(\n        "flex items-center gap-1 transition-all duration-300",\n        containerClassName,\n      )}\n    >\n      {Array.from({ length: steps }).map((_, index) => {\n        const { opacity, color: stepColor } = getStepColor(\n          currentStep,\n          index,\n          color,\n        );\n\n        return (\n          <div\n            key={index}\n            className={cn(\n              "relative w-10 h-5 transition-all duration-300",\n              size === "sm" && "w-6 h-3",\n              size === "md" && "w-10 h-5",\n              size === "lg" && "w-14 h-7",\n              stepClassName,\n            )}\n          >\n            <Component\n              className={cn(\n                "w-full h-full transition-all duration-300",\n                index === 0 && "rounded-l-full",\n                index === steps - 1 && "rounded-r-full",\n              )}\n              style={{\n                background: stepColor,\n                opacity: opacity,\n                height: "100%",\n                width: "100%",\n              }}\n              onMouseEnter={() => handleMouseEnter(index, currentStep)}\n              onMouseLeave={() => handleMouseLeave(index)}\n              {...props}\n            />\n            {((isFinished && index === steps - 1 && isTooltipVisible) ||\n              (!isFinished &&\n                currentStep === index + 1 &&\n                isTooltipVisible)) && (\n              <AnimatePresence mode="wait">\n                <motion.span\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 10 }}\n                  className={cn(\n                    "absolute -top-[100%] -translate-y-1/2 left-1/2 -translate-x-1/2 z-10 px-2 py-1 rounded-sm bg-black text-white text-xs whitespace-nowrap shadow-lg pointer-events-none",\n                    tooltipClassName,\n                  )}\n                >\n                  {displayTooltipText(index)}\n                </motion.span>\n              </AnimatePresence>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StepBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/step-bar/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar",
  },
  "wheel-selector": {
    name: "wheel-selector",
    description: "A wheel selector for picking a number.",
    type: "registry:ui",
    dependencies: ["motion"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/wheel-selector/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/wheel-selector.tsx",
        content:
          '"use client";\n\nimport { cn } from "@/lib/utils";\nimport { animate, motion, useMotionValue } from "motion/react";\nimport * as React from "react";\n\nfunction WheelSelector<T>({\n  className,\n  frameClassName,\n  gap = 14,\n  height = 30,\n  items,\n  numbersContainerClassName,\n  value,\n  width = 36,\n  onChange,\n  renderItem,\n}: {\n  className?: string;\n  frameClassName?: string;\n  gap?: number;\n  height?: number;\n  items: T[];\n  numbersContainerClassName?: string;\n  value?: T;\n  width?: number;\n  onChange?: (value: T) => void;\n  renderItem?: ({\n    item,\n    isSelected,\n  }: {\n    item: T;\n    isSelected: boolean;\n  }) => React.ReactNode;\n}) {\n  const x = useMotionValue(0);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [isGrabbing, setIsGrabbing] = React.useState(false);\n  const [dragProps, setDragProps] = React.useState({});\n\n  const itemWidth = width + gap;\n\n  const selectedIndex = React.useMemo(() => {\n    if (!value) return -1;\n    return items.indexOf(value);\n  }, [items, value]);\n\n  React.useLayoutEffect(() => {\n    if (containerRef.current && selectedIndex !== -1) {\n      const containerCenter = containerRef.current.offsetWidth / 2;\n      const targetX = containerCenter - selectedIndex * itemWidth - width / 2;\n\n      animate(x, targetX, {\n        type: "spring",\n        damping: 30,\n        stiffness: 400,\n      });\n\n      setDragProps({\n        dragConstraints: {\n          right: containerCenter - width / 2,\n          left: containerCenter - (items.length - 1) * itemWidth - width / 2,\n        },\n        dragTransition: {\n          power: 0.1,\n          timeConstant: 250,\n          modifyTarget: (target: number) => {\n            const targetIndex = Math.round(\n              (containerCenter - target - width / 2) / itemWidth,\n            );\n            const clampedIndex = Math.max(\n              0,\n              Math.min(targetIndex, items.length - 1),\n            );\n            const newValue = items[clampedIndex];\n            onChange?.(newValue);\n\n            const newTarget =\n              containerCenter - clampedIndex * itemWidth - width / 2;\n            return newTarget;\n          },\n        },\n      });\n    }\n  }, [items, selectedIndex, itemWidth, x, onChange, width, gap]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        "relative h-16 cursor-grab overflow-hidden",\n        isGrabbing && "cursor-grabbing",\n        className,\n      )}\n      style={{\n        background: `linear-gradient(to right, rgba(255, 255, 255, 0.5) 40%, rgba(0, 0, 0, 0) 70%)`,\n        mask: `linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgb(0, 0, 1) 50%, rgba(0, 0, 0, 0) 100%)`,\n      }}\n    >\n      <motion.div\n        drag="x"\n        style={{\n          x,\n          gap,\n        }}\n        className={cn(\n          "flex absolute top-1/2 items-center -translate-y-1/2",\n          numbersContainerClassName,\n        )}\n        {...dragProps}\n        onDragStart={() => setIsGrabbing(true)}\n        onDragEnd={() => setIsGrabbing(false)}\n      >\n        {items.map((item, index) => {\n          const isSelected = selectedIndex === index;\n\n          return (\n            <div\n              key={index}\n              className="flex-shrink-0"\n              style={{\n                width,\n                height,\n              }}\n            >\n              {renderItem ? (\n                renderItem({ item, isSelected })\n              ) : (\n                <span\n                  className="flex justify-center items-center w-full h-full text-black rounded-md transition-opacity"\n                  style={{\n                    opacity: isSelected ? 1 : 0.4,\n                  }}\n                >\n                  {String(item)}\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </motion.div>\n      <div className="absolute inset-0 pointer-events-none">\n        <div\n          className={cn(\n            "absolute top-1/2 left-1/2 rounded-md border-2 -translate-x-1/2 -translate-y-1/2 size-9 border-neutral-700",\n            frameClassName,\n          )}\n          style={{\n            width,\n            height,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WheelSelector;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/components/wheel-selector/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "wheel-selector";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/wheel-selector",
  },
  "transfer-demo": {
    name: "transfer-demo",
    description: "Demo showing a transfer animation.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/transfer"],
    files: [
      {
        path: "registry/demo/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/animations/transfer.tsx",
        content:
          'import { Icons } from "@/components/icons";\nimport Transfer from "@/components/targetblank/animations/transfer";\n\nexport const TransferDemo = () => {\n  return (\n    <Transfer\n      firstChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.gitHub className="size-6" />\n          </div>\n        </div>\n      }\n      secondChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.apple className="size-6" />\n          </div>\n        </div>\n      }\n      animation\n      containerWidth="400px"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/animations/transfer/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer-demo",
  },
  "particles-background-demo": {
    name: "particles-background-demo",
    description: "Demo showing an animated background with particles effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/particles-background"],
    files: [
      {
        path: "registry/demo/backgrounds/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/backgrounds/particles.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\n\nexport const ParticlesBackgroundDemo = () => {\n  return <ParticlesBackground color="#5a5a5a" count={50} />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/backgrounds/particles/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-background-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-background-demo",
  },
  "speed-background-demo": {
    name: "speed-background-demo",
    description: "Demo showing an animated background with speed effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/speed-background"],
    files: [
      {
        path: "registry/demo/backgrounds/speed/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/backgrounds/speed.tsx",
        content:
          'import SpeedBackground from "@/components/targetblank/backgrounds/speed";\n\nexport default function SpeedBackgroundDemo() {\n  return (\n    <SpeedBackground\n      className="w-full h-96 bg-white rounded-xl"\n      count={15}\n      color="black"\n    >\n      <div className="flex items-center justify-center h-full text-3xl font-bold">\n        Speed Mode 💨\n      </div>\n    </SpeedBackground>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/backgrounds/speed/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "speed-background-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/speed-background-demo",
  },
  "copy-button-demo": {
    name: "copy-button-demo",
    description:
      "Demo showing an animated button with copy to clipboard effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/copy-button"],
    files: [
      {
        path: "registry/demo/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/copy.tsx",
        content:
          'import { CopyButton } from "@/components/targetblank/buttons/copy";\n\nexport const CopyButtonDemo = () => {\n  return <CopyButton variant="outline" content="Content to copy" size="md" />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button-demo",
  },
  "particles-button-demo": {
    name: "particles-button-demo",
    description: "Demo showing an animated button with particles effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/particles-button"],
    files: [
      {
        path: "registry/demo/buttons/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/particles.tsx",
        content:
          'import ParticlesButton from "@/components/targetblank/buttons/particles";\nimport { StarIcon } from "lucide-react";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\nexport const ParticlesButtonDemo = () => {\n  const [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <ParticlesButton\n      as={motion.button}\n      className="gap-2 p-2 bg-transparent rounded-md border border-muted text-primary w-fit"\n      count={10}\n      color="#5a5a5a"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onClick={() => setIsFilled((prev) => !prev)}\n    >\n      <StarIcon className="size-4" fill={isFilled ? "none" : "currentColor"} />\n      Click me\n    </ParticlesButton>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-button-demo",
  },
  "card-demo": {
    name: "card-demo",
    description: "Demo showing a card component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/card"],
    files: [
      {
        path: "registry/demo/components/card/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/card.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\nimport {\n  Card,\n  CardDescription,\n  CardFooter,\n  CardGradient,\n  CardHeader,\n  CardIndicator,\n  CardTitle,\n} from "@/components/targetblank/components/card";\n\nexport const CardDemo = () => {\n  return (\n    <Card\n      image={\n        "https://preview.redd.it/nature-vibes-v0-vhl86w7e60jc1.jpg?width=1080&crop=smart&auto=webp&s=b1553f868c8d46408ac0f2a860f19f8c14793bf4"\n      }\n    >\n      <CardGradient />\n      <CardIndicator className="z-[1]">\n        <div className="flex gap-2 justify-start items-center p-1 w-fit">\n          <div className="bg-lime-400 rounded-full shadow-sm size-1.5 shadow-lime-300" />\n          <span className="text-[9px] text-gray-600 leading-none">\n            New-Reels Instagram Creator\n          </span>\n        </div>\n      </CardIndicator>\n      <CardHeader className="z-[1]">\n        <CardTitle>\n          <div className="flex flex-col gap-1">\n            <span className="text-lime-900">Craft Your</span>\n            <span className="italic font-light text-gray-800">\n              Imaginary Escape\n            </span>\n          </div>\n        </CardTitle>\n        <CardDescription>\n          <span className="text-sm text-lime-800">\n            The leading AI art generation and image editing tool with 3.5B+\n            creations\n          </span>\n        </CardDescription>\n      </CardHeader>\n      <CardFooter\n        as="button"\n        className="px-4 py-2 w-full tracking-tight bg-[#bee227] rounded-lg"\n      >\n        <ParticlesBackground count={10} />\n        <span className="z-10 w-full text-center">Generated Image</span>\n      </CardFooter>\n    </Card>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/components/card/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "card-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/card-demo",
  },
  "loading-bar-demo": {
    name: "loading-bar-demo",
    description: "Demo showing a loading bar with a gradient background.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/loading-bar"],
    files: [
      {
        path: "registry/demo/components/loading-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/loading-bar.tsx",
        content:
          'import LoadingBar from "@/components/targetblank/components/loading-bar";\nimport * as React from "react";\n\nexport const LoadingBarDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n  const [isComplete, setIsComplete] = React.useState(false);\n  const [elapsedTime, setElapsedTime] = React.useState(0);\n\n  React.useEffect(() => {\n    if (isComplete) {\n      const timer = setTimeout(() => {\n        setProgress(0);\n        setElapsedTime(0);\n        setIsComplete(false);\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n\n    const interval = setInterval(() => {\n      setElapsedTime((t) => t + 1);\n      setProgress((prev) => {\n        if (prev >= 100) {\n          setIsComplete(true);\n          return 100;\n        }\n        const randomStep = Math.floor(Math.random() * 25) + 5;\n        return Math.min(prev + randomStep, 100);\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isComplete]);\n\n  const averageSpeed = elapsedTime > 0 ? progress / elapsedTime : 0;\n  const timeLeft =\n    averageSpeed > 0 ? Math.ceil((100 - progress) / averageSpeed) : 0;\n\n  const indicator =\n    progress < 100 && timeLeft > 0\n      ? `About ${timeLeft} second${timeLeft > 1 ? "s" : ""} remaining...`\n      : elapsedTime > 0\n        ? "Finished"\n        : "Loading...";\n\n  return (\n    <LoadingBar\n      progress={progress}\n      indicator={indicator}\n      completed={isComplete}\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/loading-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "loading-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/loading-bar-demo",
  },
  "step-bar-demo": {
    name: "step-bar-demo",
    description: "Demo showing a step bar with a gradient background.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/step-bar"],
    files: [
      {
        path: "registry/demo/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/step-bar.tsx",
        content:
          'import StepBar from "@/components/targetblank/components/step-bar";\nimport * as React from "react";\n\nexport const StepBarDemo = () => {\n  const [currentStep, setCurrentStep] = React.useState(1);\n  const [isFinished, setIsFinished] = React.useState(false);\n  const TOTAL_STEPS = 5;\n\n  const handleNext = React.useCallback(() => {\n    if (currentStep < TOTAL_STEPS + 1) {\n      setCurrentStep((prev) => prev + 1);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  const handleReset = React.useCallback(() => {\n    setCurrentStep(1);\n    setIsFinished(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (currentStep > TOTAL_STEPS) {\n      setIsFinished(true);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  React.useEffect(() => {\n    setTimeout(\n      () => {\n        if (isFinished) {\n          handleReset();\n        } else {\n          handleNext();\n        }\n      },\n      isFinished ? 3000 : 1500,\n    );\n  }, [isFinished, handleNext, handleReset]);\n\n  const customTooltip = React.useCallback(\n    (index: number) => {\n      const steps = [\n        "Start your journey",\n        "Choose your path",\n        "Learn the basics",\n        "Practice skills",\n        "Master the craft",\n        "You\'re done!",\n      ];\n      if (isFinished && index === TOTAL_STEPS - 1) {\n        return steps[steps.length - 1];\n      }\n      return steps[index];\n    },\n    [isFinished],\n  );\n\n  return (\n    <StepBar\n      currentStep={currentStep}\n      finished={isFinished}\n      steps={TOTAL_STEPS}\n      tooltipContent={customTooltip}\n      tooltipKeepVisible\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/step-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar-demo",
  },
  "wheel-selector-demo": {
    name: "wheel-selector-demo",
    description: "Demo for the wheel selector component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["wheel-selector"],
    files: [
      {
        path: "registry/demo/components/wheel-selector/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/wheel-selector.tsx",
        content:
          '"use client";\n\nimport WheelSelector from "@/components/targetblank/components/wheel-selector";\nimport React from "react";\n\nconst WheelSelectorDemo = () => {\n  const numberItems = React.useMemo(() => {\n    const min = 100;\n    const max = 200;\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min);\n  }, []);\n  const [numberValue, setNumberValue] = React.useState(numberItems[43]); // 143\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const newValue =\n        numberItems[Math.floor(Math.random() * numberItems.length)];\n      setNumberValue(newValue);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [numberItems]);\n\n  const fruitItems = React.useMemo(\n    () => ["Apple", "Banana", "Cherry", "Date", "Elderberry", "Fig", "Grape"],\n    [],\n  );\n  const [fruitValue, setFruitValue] = React.useState(fruitItems[2]);\n\n  return (\n    <div className="flex flex-col gap-8 justify-center items-center">\n      <div>\n        <h3 className="mb-2 font-semibold text-center">Number Selector</h3>\n        <WheelSelector<number>\n          items={numberItems}\n          value={numberValue}\n          onChange={setNumberValue}\n          className="w-48"\n        />\n      </div>\n\n      <div>\n        <h3 className="mb-2 font-semibold text-center">Fruit Selector</h3>\n        <WheelSelector<string>\n          items={fruitItems}\n          value={fruitValue}\n          onChange={setFruitValue}\n          width={100}\n          className="w-80"\n          renderItem={({ item, isSelected }) => (\n            <div\n              className={`flex h-full w-full items-center justify-center rounded-lg font-bold transition-all duration-200 ${\n                isSelected\n                  ? "text-muted bg-primary dark:bg-muted dark:text-primary"\n                  : "text-primary bg-muted dark:bg-primary dark:text-muted"\n              }`}\n            >\n              {item}\n            </div>\n          )}\n        />\n        <p className="text-xs text-center text-muted dark:text-primary">\n          Try to grab it\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default WheelSelectorDemo;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/wheel-selector/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "wheel-selector-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/wheel-selector-demo",
  },
};
