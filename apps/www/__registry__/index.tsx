/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.mts
// Do not edit this file directly.
import * as React from "react";

export const index: Record<string, any> = {
  index: {
    name: "index",
    description: "",
    type: "registry:style",
    dependencies: [
      "tw-animate-css",
      "class-variance-authority",
      "lucide-react",
    ],
    devDependencies: undefined,
    registryDependencies: ["utils"],
    files: [],
    keywords: [],
    component: null,
    command: "https://targetblank.dev/r/index",
  },
  transfer: {
    name: "transfer",
    description: "A transfer animation.",
    type: "registry:ui",
    dependencies: [
      "motion",
      "lucide-react",
      "class-variance-authority",
      "react-particles-js",
    ],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/animations/transfer.tsx",
        content:
          '"use client";\n\nimport { cn } from "@/lib/utils";\nimport React, { ReactElement, useEffect, useRef, useState } from "react";\n\nexport interface TransferProps {\n  animation?: boolean;\n  color?: string[];\n  containerClassName?: string;\n  containerHeight?: number;\n  containerWidth?: string;\n  direction?: "right" | "left";\n  delay?: number;\n  duration?: {\n    min: number;\n    max: number;\n  };\n  firstChild: React.ReactNode;\n  maxCurve?: number;\n  opacity?: number;\n  secondChild: React.ReactNode;\n  size?: {\n    min: number;\n    max: number;\n  };\n  speed?: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface Particle {\n  id: number;\n  element: ReactElement;\n  timeoutId: ReturnType<typeof setTimeout>;\n}\n\nfunction randomBetween(a: number, b: number) {\n  return a + Math.random() * (b - a);\n}\n\nfunction getWidthPx(width: string, parentPx = 600): number {\n  if (width.endsWith("px")) return parseFloat(width);\n  if (width.endsWith("%")) return (parseFloat(width) / 100) * parentPx;\n\n  return parseFloat(width) || parentPx;\n}\n\nfunction Transfer({\n  animation = true,\n  color = ["#000"],\n  containerClassName,\n  containerHeight = 40,\n  containerWidth = "100%",\n  delay = 40,\n  direction = "right",\n  duration = { min: 1.2, max: 1.8 },\n  firstChild,\n  maxCurve = 18,\n  opacity = 1,\n  secondChild,\n  size = { min: 6, max: 12 },\n  speed = { min: 0, max: 1.2 },\n}: TransferProps) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const particleId = useRef(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [measuredWidth, setMeasuredWidth] = useState<number>(\n    getWidthPx(containerWidth),\n  );\n\n  useEffect(() => {\n    function updateWidth() {\n      if (containerRef.current) {\n        setMeasuredWidth(containerRef.current.getBoundingClientRect().width);\n      }\n    }\n    updateWidth();\n    window.addEventListener("resize", updateWidth);\n    return () => window.removeEventListener("resize", updateWidth);\n  }, [containerWidth]);\n\n  useEffect(() => {\n    if (animation) {\n      intervalRef.current = setInterval(() => {\n        const randomSize = randomBetween(size.min, size.max);\n        const generatedMaxCurve = Math.min(\n          maxCurve,\n          (containerHeight - randomSize) / 2,\n        );\n        const randomCurve = randomBetween(\n          -generatedMaxCurve,\n          generatedMaxCurve,\n        );\n        const minTop = Math.max(0, -randomCurve) + 1;\n        const maxTop =\n          Math.min(\n            containerHeight - randomSize,\n            containerHeight - randomSize - randomCurve,\n          ) - 1;\n        const startY = randomBetween(minTop, maxTop);\n        const randomDelay = randomBetween(speed.min, speed.max);\n        const randomDuration = randomBetween(duration.min, duration.max);\n        const randomColor = Math.floor(randomBetween(0, color.length));\n        const id = particleId.current++;\n\n        const style: Record<string, unknown> = {\n          backgroundColor: color[randomColor],\n          opacity,\n          width: `${randomSize}px`,\n          height: `${randomSize}px`,\n          animation: `particle-transfer-${direction} ${randomDuration}s cubic-bezier(.7,.2,.3,1) ${randomDelay}s 1`,\n          ["--curve"]: `${randomCurve}px`,\n        };\n        if (direction === "right") {\n          style.left = 0;\n          style.top = `${startY}px`;\n        } else if (direction === "left") {\n          style.left = `calc(100% - ${randomSize}px)`;\n          style.top = `${startY}px`;\n        }\n\n        const timeoutId = setTimeout(\n          () => {\n            setParticles((prev) => prev.filter((p) => p.id !== id));\n          },\n          (randomDelay + randomDuration) * 1000,\n        );\n\n        const element = (\n          <div\n            key={id}\n            className="absolute rounded-full opacity-70"\n            style={style}\n          />\n        );\n        setParticles((prev) => [...prev, { id, element, timeoutId }]);\n      }, delay);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [\n    containerHeight,\n    speed.max,\n    speed.min,\n    duration.max,\n    duration.min,\n    animation,\n    maxCurve,\n    size.max,\n    size.min,\n    color,\n    opacity,\n    direction,\n    delay,\n    measuredWidth,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      setParticles((prev) => {\n        prev.forEach((p) => clearTimeout(p.timeoutId));\n        return [];\n      });\n    };\n  }, []);\n\n  const getKeyframes = () => {\n    switch (direction) {\n      case "right":\n        return `\n          @keyframes particle-transfer-right {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      case "left":\n        return `\n          @keyframes particle-transfer-left {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(-${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(-${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      default:\n        return "";\n    }\n  };\n\n  return (\n    <>\n      <style>{getKeyframes()}</style>\n      <div\n        className={cn(\n          "flex items-center justify-between relative z-10",\n          containerClassName,\n        )}\n        style={{ width: containerWidth }}\n        ref={containerRef}\n      >\n        {firstChild}\n\n        <div\n          className="absolute left-0 top-0 w-full h-10 rounded-md overflow-hidden pointer-events-none"\n          style={{ width: containerWidth }}\n        >\n          {particles.map((p) => p.element)}\n        </div>\n\n        {secondChild}\n      </div>\n    </>\n  );\n}\n\nexport default Transfer;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/animations/transfer/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer",
  },
  "copy-button": {
    name: "copy-button",
    description: "A button with a copy to clipboard animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/copy.tsx",
        content:
          '"use client";\n\nimport { cva, type VariantProps } from "class-variance-authority";\nimport { CheckIcon, CopyIcon } from "lucide-react";\nimport { AnimatePresence, HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nconst buttonVariants = cva(\n  "inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",\n  {\n    variants: {\n      variant: {\n        default:\n          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",\n        muted: "bg-muted text-muted-foreground",\n        destructive:\n          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",\n        outline:\n          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",\n        secondary:\n          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",\n        ghost:\n          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",\n      },\n      size: {\n        default: "size-8 rounded-lg [&_svg]:size-4",\n        sm: "size-6 [&_svg]:size-3",\n        md: "size-10 rounded-lg [&_svg]:size-5",\n        lg: "size-12 rounded-xl [&_svg]:size-6",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "default",\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<"button">, "children" | "onCopy"> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error("Error copying command", error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot="copy-button"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode="wait">\n        <motion.span\n          key={localIsCopied ? "check" : "copy"}\n          data-slot="copy-button-icon"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { buttonVariants, CopyButton, type CopyButtonProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button",
  },
  "step-bar": {
    name: "step-bar",
    description: "A step bar with a gradient background.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/step-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { AnimatePresence, motion } from "motion/react";\nimport * as React from "react";\n\nconst DEFAULT_COMPONENT = "div";\n\ninterface StepBarProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> {\n  color?: string;\n  containerClassName?: string;\n  currentStep: number;\n  finished?: boolean;\n  lastStepVisible?: boolean;\n  onCurrentStepHover?: (index: number) => void;\n  onCurrentStepLeave?: () => void;\n  onStepHover?: (index: number) => void;\n  onStepLeave?: () => void;\n  tooltipClassName?: string;\n  tooltipContent?: (index: number) => string;\n  tooltipKeepVisible?: boolean;\n  size?: "sm" | "md" | "lg";\n  steps: number;\n  stepClassName?: string;\n  stepComponent?: T;\n}\n\nconst StepBar = <T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  color = "#000",\n  containerClassName,\n  currentStep,\n  finished = false,\n  lastStepVisible = true,\n  onCurrentStepHover,\n  onCurrentStepLeave,\n  onStepHover,\n  onStepLeave,\n  tooltipClassName,\n  tooltipContent,\n  tooltipKeepVisible = false,\n  size = "md",\n  steps,\n  stepClassName,\n  stepComponent,\n  ...props\n}: StepBarProps<T>) => {\n  const Component = stepComponent || DEFAULT_COMPONENT;\n\n  const [isTooltipVisible, setIsTooltipVisible] =\n    React.useState(tooltipKeepVisible);\n  const isFinished = React.useMemo(\n    () => finished || currentStep > steps,\n    [finished, currentStep, steps],\n  );\n\n  const getStepColor = React.useCallback(\n    (currentStep: number, index: number, color: string) => {\n      if (isFinished) return { opacity: 1, color };\n\n      if (currentStep < index + 1) {\n        return {\n          opacity: 0.2,\n          color: lastStepVisible ? color : "transparent",\n        };\n      }\n      if (currentStep === index + 1) {\n        return { opacity: 0.5, color };\n      }\n      return { opacity: 1, color };\n    },\n    [isFinished, lastStepVisible],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (index: number, currentStep: number) => {\n      onStepHover?.(index);\n\n      if (isFinished && steps - 1 === index) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n        return;\n      }\n\n      if (index + 1 === currentStep && !isFinished) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n      }\n    },\n    [isFinished, onCurrentStepHover, onStepHover, steps],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (index: number) => {\n      if (!tooltipKeepVisible) {\n        setIsTooltipVisible(false);\n        onStepLeave?.();\n      }\n\n      if (currentStep === index + 1 && !isFinished) {\n        onCurrentStepLeave?.();\n      }\n    },\n    [\n      tooltipKeepVisible,\n      currentStep,\n      isFinished,\n      onStepLeave,\n      onCurrentStepLeave,\n    ],\n  );\n\n  const displayTooltipText = React.useCallback(\n    (index: number) => {\n      if (tooltipContent) return tooltipContent(index);\n\n      if (index === 0) {\n        return "Start";\n      }\n      if (index > steps || isFinished) {\n        return "End";\n      }\n      return `Step ${index + 1}`;\n    },\n    [isFinished, steps, tooltipContent],\n  );\n\n  return (\n    <div\n      className={cn(\n        "flex items-center gap-1 transition-all duration-300",\n        containerClassName,\n      )}\n    >\n      {Array.from({ length: steps }).map((_, index) => {\n        const { opacity, color: stepColor } = getStepColor(\n          currentStep,\n          index,\n          color,\n        );\n\n        return (\n          <div\n            key={index}\n            className={cn(\n              "relative w-10 h-5 transition-all duration-300",\n              size === "sm" && "w-6 h-3",\n              size === "md" && "w-10 h-5",\n              size === "lg" && "w-14 h-7",\n              stepClassName,\n            )}\n          >\n            <Component\n              className={cn(\n                "w-full h-full transition-all duration-300",\n                index === 0 && "rounded-l-full",\n                index === steps - 1 && "rounded-r-full",\n              )}\n              style={{\n                background: stepColor,\n                opacity: opacity,\n                height: "100%",\n                width: "100%",\n              }}\n              onMouseEnter={() => handleMouseEnter(index, currentStep)}\n              onMouseLeave={() => handleMouseLeave(index)}\n              {...props}\n            />\n            {((isFinished && index === steps - 1 && isTooltipVisible) ||\n              (!isFinished &&\n                currentStep === index + 1 &&\n                isTooltipVisible)) && (\n              <AnimatePresence mode="wait">\n                <motion.span\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 10 }}\n                  className={cn(\n                    "absolute -top-[100%] -translate-y-1/2 left-1/2 -translate-x-1/2 z-10 px-2 py-1 rounded-sm bg-black text-white text-xs whitespace-nowrap shadow-lg pointer-events-none",\n                    tooltipClassName,\n                  )}\n                >\n                  {displayTooltipText(index)}\n                </motion.span>\n              </AnimatePresence>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StepBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/step-bar/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar",
  },
  "transfer-demo": {
    name: "transfer-demo",
    description: "Demo showing a transfer animation.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/transfer"],
    files: [
      {
        path: "registry/demo/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/animations/transfer.tsx",
        content:
          'import { Icons } from "@/components/icons";\nimport Transfer from "@/components/targetblank/animations/transfer";\n\nexport const TransferDemo = () => {\n  return (\n    <Transfer\n      firstChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.gitHub className="size-6" />\n          </div>\n        </div>\n      }\n      secondChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.apple className="size-6" />\n          </div>\n        </div>\n      }\n      animation\n      containerWidth="400px"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/animations/transfer/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer-demo",
  },
  "copy-button-demo": {
    name: "copy-button-demo",
    description:
      "Demo showing an animated button with copy to clipboard effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/copy-button"],
    files: [
      {
        path: "registry/demo/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/copy.tsx",
        content:
          'import { CopyButton } from "@/components/targetblank/buttons/copy";\n\nexport const CopyButtonDemo = () => {\n  return <CopyButton variant="outline" content="Content to copy" size="md" />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button-demo",
  },
  "step-bar-demo": {
    name: "step-bar-demo",
    description: "Demo showing a step bar with a gradient background.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/step-bar"],
    files: [
      {
        path: "registry/demo/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/step-bar.tsx",
        content:
          'import StepBar from "@/components/targetblank/components/step-bar";\nimport * as React from "react";\n\nexport const StepBarDemo = () => {\n  const [currentStep, setCurrentStep] = React.useState(1);\n  const [isFinished, setIsFinished] = React.useState(false);\n  const TOTAL_STEPS = 5;\n\n  const handleNext = React.useCallback(() => {\n    if (currentStep < TOTAL_STEPS + 1) {\n      setCurrentStep((prev) => prev + 1);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  const handleReset = React.useCallback(() => {\n    setCurrentStep(1);\n    setIsFinished(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (currentStep > TOTAL_STEPS) {\n      setIsFinished(true);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  React.useEffect(() => {\n    setTimeout(\n      () => {\n        if (isFinished) {\n          handleReset();\n        } else {\n          handleNext();\n        }\n      },\n      isFinished ? 3000 : 1500,\n    );\n  }, [isFinished, handleNext, handleReset]);\n\n  const customTooltip = React.useCallback(\n    (index: number) => {\n      const steps = [\n        "Start your journey",\n        "Choose your path",\n        "Learn the basics",\n        "Practice skills",\n        "Master the craft",\n        "You\'re done!",\n      ];\n      if (isFinished && index === TOTAL_STEPS - 1) {\n        return steps[steps.length - 1];\n      }\n      return steps[index];\n    },\n    [isFinished],\n  );\n\n  return (\n    <StepBar\n      currentStep={currentStep}\n      finished={isFinished}\n      steps={TOTAL_STEPS}\n      tooltipContent={customTooltip}\n      tooltipKeepVisible\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/step-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar-demo",
  },
};
