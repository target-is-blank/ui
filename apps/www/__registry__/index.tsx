/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.mts
// Do not edit this file directly.
import * as React from "react";

export const index: Record<string, any> = {
  index: {
    name: "index",
    description: "",
    type: "registry:style",
    dependencies: [
      "tw-animate-css",
      "class-variance-authority",
      "lucide-react",
    ],
    devDependencies: undefined,
    registryDependencies: ["utils"],
    files: [],
    keywords: [],
    component: null,
    command: "https://targetblank.dev/r/index",
  },
  sparkles: {
    name: "sparkles",
    description: "A sparkle animation.",
    type: "registry:ui",
    dependencies: [
      "motion",
      "lucide-react",
      "class-variance-authority",
      "react-particles-js",
    ],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/animations/sparkles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/animations/sparkles.tsx",
        content:
          'import * as React from "react";\n\nexport enum Easing {\n  LINEAR = "linear",\n  EASE_IN = "ease-in",\n  EASE_OUT = "ease-out",\n  EASE_IN_OUT = "ease-in-out",\n}\n\ninterface SparklesProps extends React.HTMLAttributes<HTMLDivElement> {\n  sparkColor?: string;\n  sparkSize?: number;\n  sparkRadius?: number;\n  sparkCount?: number;\n  duration?: number;\n  easing?: Easing;\n  extraScale?: number;\n  children?: React.ReactNode;\n}\n\ninterface Spark {\n  x: number;\n  y: number;\n  angle: number;\n  startTime: number;\n}\n\nconst Sparkles: React.FC<SparklesProps> = ({\n  sparkColor = "#fff",\n  sparkSize = 10,\n  sparkRadius = 15,\n  sparkCount = 8,\n  duration = 400,\n  easing = Easing.EASE_OUT,\n  extraScale = 1.0,\n  children,\n  ...props\n}) => {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const sparksRef = React.useRef<Spark[]>([]);\n  const startTimeRef = React.useRef<number | null>(null);\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const parent = canvas.parentElement;\n    if (!parent) return;\n\n    let resizeTimeout: NodeJS.Timeout;\n\n    const resizeCanvas = () => {\n      const { width, height } = parent.getBoundingClientRect();\n      if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n      }\n    };\n\n    const handleResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(resizeCanvas, 100);\n    };\n\n    const ro = new ResizeObserver(handleResize);\n    ro.observe(parent);\n\n    resizeCanvas();\n\n    return () => {\n      ro.disconnect();\n      clearTimeout(resizeTimeout);\n    };\n  }, []);\n\n  const easeFunc = React.useCallback(\n    (t: number) => {\n      switch (easing) {\n        case Easing.LINEAR:\n          return t;\n        case Easing.EASE_IN:\n          return t * t;\n        case Easing.EASE_IN_OUT:\n          return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        default:\n          return t * (2 - t);\n      }\n    },\n    [easing],\n  );\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext("2d");\n    if (!ctx) return;\n\n    let animationId: number;\n\n    const draw = (timestamp: number) => {\n      if (!startTimeRef.current) {\n        startTimeRef.current = timestamp;\n      }\n      ctx?.clearRect(0, 0, canvas.width, canvas.height);\n\n      sparksRef.current = sparksRef.current.filter((spark: Spark) => {\n        const elapsed = timestamp - spark.startTime;\n        if (elapsed >= duration) {\n          return false;\n        }\n\n        const progress = elapsed / duration;\n        const eased = easeFunc(progress);\n\n        const distance = eased * sparkRadius * extraScale;\n        const lineLength = sparkSize * (1 - eased);\n\n        const x1 = spark.x + distance * Math.cos(spark.angle);\n        const y1 = spark.y + distance * Math.sin(spark.angle);\n        const x2 = spark.x + (distance + lineLength) * Math.cos(spark.angle);\n        const y2 = spark.y + (distance + lineLength) * Math.sin(spark.angle);\n\n        ctx.strokeStyle = sparkColor;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n\n        return true;\n      });\n\n      animationId = requestAnimationFrame(draw);\n    };\n\n    animationId = requestAnimationFrame(draw);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, [\n    sparkColor,\n    sparkSize,\n    sparkRadius,\n    sparkCount,\n    duration,\n    easeFunc,\n    extraScale,\n  ]);\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>): void => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const now = performance.now();\n    const newSparks: Spark[] = Array.from({ length: sparkCount }, (_, i) => ({\n      x,\n      y,\n      angle: (2 * Math.PI * i) / sparkCount,\n      startTime: now,\n    }));\n\n    sparksRef.current.push(...newSparks);\n  };\n\n  return (\n    <div className="relative w-full h-full" onClick={handleClick} {...props}>\n      <canvas\n        ref={canvasRef}\n        className="absolute inset-0 pointer-events-none w-full h-full"\n      />\n      {children}\n    </div>\n  );\n};\n\nexport default Sparkles;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/animations/sparkles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "sparkles";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/sparkles",
  },
  transfer: {
    name: "transfer",
    description: "A transfer animation.",
    type: "registry:ui",
    dependencies: [
      "motion",
      "lucide-react",
      "class-variance-authority",
      "react-particles-js",
    ],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/animations/transfer.tsx",
        content:
          '"use client";\n\nimport { cn } from "@/lib/utils";\nimport React, { ReactElement, useEffect, useRef, useState } from "react";\n\nexport interface TransferProps {\n  animation?: boolean;\n  color?: string[];\n  containerClassName?: string;\n  containerHeight?: number;\n  containerWidth?: string;\n  direction?: "right" | "left";\n  delay?: number;\n  duration?: {\n    min: number;\n    max: number;\n  };\n  firstChild: React.ReactNode;\n  maxCurve?: number;\n  opacity?: number;\n  secondChild: React.ReactNode;\n  size?: {\n    min: number;\n    max: number;\n  };\n  speed?: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface Particle {\n  id: number;\n  element: ReactElement;\n  timeoutId: ReturnType<typeof setTimeout>;\n}\n\nfunction randomBetween(a: number, b: number) {\n  return a + Math.random() * (b - a);\n}\n\nfunction getWidthPx(width: string, parentPx = 600): number {\n  if (width.endsWith("px")) return parseFloat(width);\n  if (width.endsWith("%")) return (parseFloat(width) / 100) * parentPx;\n\n  return parseFloat(width) || parentPx;\n}\n\nfunction Transfer({\n  animation = true,\n  color = ["#000"],\n  containerClassName,\n  containerHeight = 40,\n  containerWidth = "100%",\n  delay = 40,\n  direction = "right",\n  duration = { min: 1.2, max: 1.8 },\n  firstChild,\n  maxCurve = 18,\n  opacity = 1,\n  secondChild,\n  size = { min: 6, max: 12 },\n  speed = { min: 0, max: 1.2 },\n}: TransferProps) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const particleId = useRef(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [measuredWidth, setMeasuredWidth] = useState<number>(\n    getWidthPx(containerWidth),\n  );\n\n  useEffect(() => {\n    function updateWidth() {\n      if (containerRef.current) {\n        setMeasuredWidth(containerRef.current.getBoundingClientRect().width);\n      }\n    }\n    updateWidth();\n    window.addEventListener("resize", updateWidth);\n    return () => window.removeEventListener("resize", updateWidth);\n  }, [containerWidth]);\n\n  useEffect(() => {\n    if (animation) {\n      intervalRef.current = setInterval(() => {\n        const randomSize = randomBetween(size.min, size.max);\n        const generatedMaxCurve = Math.min(\n          maxCurve,\n          (containerHeight - randomSize) / 2,\n        );\n        const randomCurve = randomBetween(\n          -generatedMaxCurve,\n          generatedMaxCurve,\n        );\n        const minTop = Math.max(0, -randomCurve) + 1;\n        const maxTop =\n          Math.min(\n            containerHeight - randomSize,\n            containerHeight - randomSize - randomCurve,\n          ) - 1;\n        const startY = randomBetween(minTop, maxTop);\n        const randomDelay = randomBetween(speed.min, speed.max);\n        const randomDuration = randomBetween(duration.min, duration.max);\n        const randomColor = Math.floor(randomBetween(0, color.length));\n        const id = particleId.current++;\n\n        const style: Record<string, unknown> = {\n          backgroundColor: color[randomColor],\n          opacity,\n          width: `${randomSize}px`,\n          height: `${randomSize}px`,\n          animation: `particle-transfer-${direction} ${randomDuration}s cubic-bezier(.7,.2,.3,1) ${randomDelay}s 1`,\n          ["--curve"]: `${randomCurve}px`,\n        };\n        if (direction === "right") {\n          style.left = 0;\n          style.top = `${startY}px`;\n        } else if (direction === "left") {\n          style.left = `calc(100% - ${randomSize}px)`;\n          style.top = `${startY}px`;\n        }\n\n        const timeoutId = setTimeout(\n          () => {\n            setParticles((prev) => prev.filter((p) => p.id !== id));\n          },\n          (randomDelay + randomDuration) * 1000,\n        );\n\n        const element = (\n          <div\n            key={id}\n            className="absolute rounded-full opacity-70"\n            style={style}\n          />\n        );\n        setParticles((prev) => [...prev, { id, element, timeoutId }]);\n      }, delay);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [\n    containerHeight,\n    speed.max,\n    speed.min,\n    duration.max,\n    duration.min,\n    animation,\n    maxCurve,\n    size.max,\n    size.min,\n    color,\n    opacity,\n    direction,\n    delay,\n    measuredWidth,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      setParticles((prev) => {\n        prev.forEach((p) => clearTimeout(p.timeoutId));\n        return [];\n      });\n    };\n  }, []);\n\n  const getKeyframes = () => {\n    switch (direction) {\n      case "right":\n        return `\n          @keyframes particle-transfer-right {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      case "left":\n        return `\n          @keyframes particle-transfer-left {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(-${measuredWidth / 2}px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(-${measuredWidth}px) translateY(0); opacity: 0; }\n          }\n        `;\n      default:\n        return "";\n    }\n  };\n\n  return (\n    <>\n      <style>{getKeyframes()}</style>\n      <div\n        className={cn(\n          "flex items-center justify-between relative z-10",\n          containerClassName,\n        )}\n        style={{ width: containerWidth }}\n        ref={containerRef}\n      >\n        {firstChild}\n\n        <div\n          className="absolute left-0 top-0 w-full h-10 rounded-md overflow-hidden pointer-events-none"\n          style={{ width: containerWidth }}\n        >\n          {particles.map((p) => p.element)}\n        </div>\n\n        {secondChild}\n      </div>\n    </>\n  );\n}\n\nexport default Transfer;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/animations/transfer/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer",
  },
  "particles-background": {
    name: "particles-background",
    description: "A background with a particles animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/backgrounds/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/backgrounds/particles.tsx",
        content:
          'import { motion } from "motion/react";\nimport * as React from "react";\n\ninterface ParticlesBackgroundProps extends React.ComponentProps<"div"> {\n  color?: string;\n  count?: number;\n}\n\nconst ParticlesBackground = ({\n  color = "white",\n  count = 18,\n  ...props\n}: ParticlesBackgroundProps) => {\n  const [particles, setParticles] = React.useState<\n    {\n      top: number;\n      left: number;\n      size: number;\n      opacity: number;\n      delay: number;\n    }[]\n  >([]);\n\n  React.useEffect(() => {\n    setParticles(\n      Array.from({ length: count }).map(() => ({\n        top: Math.random() * 100,\n        left: Math.random() * 100,\n        size: 2 + Math.random() * 3,\n        opacity: 0.3 + Math.random() * 0.4,\n        delay: Math.random() * 2,\n      })),\n    );\n  }, [count]);\n\n  return (\n    <div\n      aria-hidden\n      className="absolute inset-0 z-0 pointer-events-none"\n      style={{ overflow: "hidden" }}\n      {...props}\n    >\n      {particles.map((p, i) => (\n        <motion.span\n          key={i}\n          className="absolute rounded-full"\n          style={{\n            top: `${p.top}%`,\n            left: `${p.left}%`,\n            width: `${p.size}px`,\n            height: `${p.size}px`,\n            opacity: p.opacity,\n            filter: "blur(0.5px)",\n            background: color,\n          }}\n          animate={{\n            y: [0, -8, 0],\n            opacity: [p.opacity, p.opacity * 0.7, p.opacity],\n          }}\n          transition={{\n            duration: 2.5 + Math.random() * 1.5,\n            repeat: Infinity,\n            delay: p.delay,\n            repeatType: "loop",\n            ease: "easeInOut",\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ParticlesBackground;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/backgrounds/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-background";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-background",
  },
  "speed-background": {
    name: "speed-background",
    description: "A background with a speed animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/backgrounds/speed/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/backgrounds/speed.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\ninterface SpeedBackgroundProps extends React.ComponentProps<"div"> {\n  count?: number;\n  color?: string;\n  className?: string;\n}\n\nconst SpeedBackground = ({\n  count = 80,\n  color = "black",\n  className,\n  ...props\n}: SpeedBackgroundProps) => {\n  const [lines, setLines] = React.useState<\n    {\n      angle: number;\n      length: number;\n      thickness: number;\n      opacity: number;\n    }[]\n  >([]);\n\n  React.useEffect(() => {\n    setLines(\n      Array.from({ length: count }).map(() => ({\n        angle: Math.random() * 360,\n        length: 500 + Math.random() * 500,\n        thickness: 5 + Math.random() * 15,\n        opacity: 0.1 + Math.random() * 0.5,\n      })),\n    );\n  }, [count]);\n\n  return (\n    <div\n      aria-hidden\n      className={cn(\n        "pointer-events-none absolute inset-0 z-0 overflow-hidden w-full h-full",\n        className,\n      )}\n      {...props}\n    >\n      <div className="absolute left-1/2 top-1/2">\n        {lines.map((line, i) => (\n          <motion.div\n            key={i}\n            className="absolute"\n            style={{\n              transform: `rotate(${line.angle}deg)`,\n              width: `${line.length}px`,\n              height: `${line.thickness}px`,\n              opacity: line.opacity,\n              backgroundColor: color,\n              transformOrigin: "0% 50%",\n              clipPath: "polygon(0% 50%, 100% 0%, 100% 100%)",\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedBackground;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/backgrounds/speed/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "speed-background";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/speed-background",
  },
  "copy-button": {
    name: "copy-button",
    description: "A button with a copy to clipboard animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/copy.tsx",
        content:
          '"use client";\n\nimport { cva, type VariantProps } from "class-variance-authority";\nimport { CheckIcon, CopyIcon } from "lucide-react";\nimport { AnimatePresence, HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nconst buttonVariants = cva(\n  "inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",\n  {\n    variants: {\n      variant: {\n        default:\n          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",\n        muted: "bg-muted text-muted-foreground",\n        destructive:\n          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",\n        outline:\n          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",\n        secondary:\n          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",\n        ghost:\n          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",\n      },\n      size: {\n        default: "size-8 rounded-lg [&_svg]:size-4",\n        sm: "size-6 [&_svg]:size-3",\n        md: "size-10 rounded-lg [&_svg]:size-5",\n        lg: "size-12 rounded-xl [&_svg]:size-6",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "default",\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<"button">, "children" | "onCopy"> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error("Error copying command", error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot="copy-button"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode="wait">\n        <motion.span\n          key={localIsCopied ? "check" : "copy"}\n          data-slot="copy-button-icon"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { buttonVariants, CopyButton, type CopyButtonProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button",
  },
  "counter-button": {
    name: "counter-button",
    description: "A button with a counter animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/counter/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/counter.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\n\ninterface CounterTimerProps extends HTMLMotionProps<"button"> {\n  acceleration?: boolean;\n  accentColor?: string;\n  angleSpread?: number;\n  disabled?: boolean;\n  durationSeconds: number;\n  label?: string;\n  needleAngle?: number;\n  maxAngle?: number;\n  minAngle?: number;\n  onClick?: () => void;\n  onComplete?: () => void;\n  tickCount?: number;\n}\n\nconst CounterButton = ({\n  durationSeconds,\n  label,\n  accentColor = "#FFA726",\n  onComplete,\n  onClick,\n  needleAngle: needleAngleProp = 90,\n  minAngle: minAngleProp = 0,\n  maxAngle: maxAngleProp = 180,\n  acceleration = false,\n  angleSpread = 15,\n  tickCount = 12,\n  disabled = false,\n  className,\n  ...props\n}: CounterTimerProps) => {\n  const [remaining, setRemaining] = React.useState<number>(durationSeconds);\n  const [needleAngle, setNeedleAngle] = React.useState<number>(needleAngleProp);\n  const [targetAngle, setTargetAngle] = React.useState<number>(needleAngleProp);\n  const [isDisabled, setIsDisabled] = React.useState<boolean>(disabled);\n  const [isFinished, setIsFinished] = React.useState<boolean>(false);\n\n  const spread = React.useMemo(() => angleSpread ?? 15, [angleSpread]);\n  const minAngle = React.useMemo(() => {\n    if (minAngleProp !== 0) return minAngleProp;\n    const randomOffset = Math.random() * (2 * spread) - spread;\n    return Math.max(0, needleAngleProp - spread + randomOffset);\n  }, [minAngleProp, needleAngleProp, spread]);\n  const maxAngle = React.useMemo(() => {\n    if (maxAngleProp !== 180) return maxAngleProp;\n    const randomOffset = Math.random() * (2 * spread) - spread;\n    return Math.min(180, needleAngleProp + spread + randomOffset);\n  }, [maxAngleProp, needleAngleProp, spread]);\n\n  const ticks = React.useMemo(\n    () =>\n      Array.from({ length: tickCount }).map((_, i) => {\n        const a = (i / (tickCount - 1)) * Math.PI;\n        const x1 = (60 + Math.cos(a) * 40).toFixed(3);\n        const y1 = (60 + Math.sin(a) * 40).toFixed(3);\n        const x2 = (60 + Math.cos(a) * 56).toFixed(3);\n        const y2 = (60 + Math.sin(a) * 56).toFixed(3);\n        return { x1, y1, x2, y2, i };\n      }),\n    [tickCount],\n  );\n\n  const minutes = React.useMemo(() => Math.floor(remaining / 60), [remaining]);\n  const seconds = React.useMemo(() => remaining % 60, [remaining]);\n\n  const computedAngle = React.useMemo(\n    () =>\n      acceleration ? needleAngle : 180 - (remaining / durationSeconds) * 180,\n    [needleAngle, remaining, durationSeconds, acceleration],\n  );\n\n  React.useEffect(() => {\n    if (remaining <= 0) {\n      setIsDisabled(true);\n      setRemaining(0);\n      setIsFinished(true);\n      if (onComplete) onComplete();\n      return;\n    }\n    setIsFinished(false);\n    const interval = setInterval(() => {\n      setRemaining((prev) => (prev > 0 ? prev - 1 : 0));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [remaining, onComplete]);\n\n  React.useEffect(() => {\n    if (!isFinished) return;\n    let frame: number;\n    const animateTo45 = () => {\n      setNeedleAngle((prev) => {\n        const target = 45;\n        const diff = target - prev;\n        if (Math.abs(diff) < 0.5) return target;\n        return prev + diff * 0.15;\n      });\n      frame = requestAnimationFrame(animateTo45);\n    };\n    frame = requestAnimationFrame(animateTo45);\n    return () => cancelAnimationFrame(frame);\n  }, [isFinished]);\n\n  React.useEffect(() => {\n    if (!acceleration || isDisabled || isFinished) return;\n    const interval = setInterval(() => {\n      const range = maxAngle - minAngle;\n      const randomProgress = Math.random();\n      const newTarget = minAngle + range * randomProgress;\n      setTargetAngle(newTarget);\n    }, 500);\n    return () => clearInterval(interval);\n  }, [acceleration, minAngle, maxAngle, isDisabled, isFinished]);\n\n  React.useEffect(() => {\n    if (!acceleration || isFinished) return;\n    let frame: number;\n    const animate = () => {\n      setNeedleAngle((prev) => {\n        const diff = targetAngle - prev;\n        if (Math.abs(diff) < 0.5) return targetAngle;\n        return prev + diff * 0.15;\n      });\n      frame = requestAnimationFrame(animate);\n    };\n    frame = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(frame);\n  }, [acceleration, isDisabled, targetAngle, isFinished]);\n\n  return (\n    <motion.button\n      onClick={onClick}\n      className={cn(\n        "relative overflow-hidden flex items-center justify-center shadow-sm bg-primary text-secondary disabled:opacity-80 disabled:!text-muted-foreground border border-gray-800 rounded-lg py-2 pl-4 pr-[90px] transition-all duration-300",\n        className,\n      )}\n      whileHover={{ scale: isDisabled ? 1 : 1.05 }}\n      whileTap={{ scale: isDisabled ? 1 : 0.95 }}\n      disabled={isDisabled}\n      {...props}\n    >\n      <div className="flex-1 flex flex-col items-start justify-center">\n        <motion.div\n          className="flex items-baseline gap-2"\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, ease: "easeOut" }}\n        >\n          <div className="flex items-baseline gap-1">\n            <span className="text-xl md:text-2xl font-bold tabular-nums">\n              {minutes}\n            </span>\n            <span className="text-md md:text-lg text-gray-500">M</span>\n          </div>\n          <div className="flex items-baseline gap-1">\n            <span className="text-xl md:text-2xl font-bold tabular-nums">\n              {seconds.toString().padStart(2, "0")}\n            </span>\n            <span className="text-md md:text-lg text-gray-500">S</span>\n          </div>\n        </motion.div>\n        {label && (\n          <motion.span\n            className="text-gray-500 font-medium text-sm md:text-md"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3, ease: "easeOut" }}\n          >\n            {label}\n          </motion.span>\n        )}\n      </div>\n      <svg\n        width="120"\n        height="120"\n        viewBox="0 0 120 120"\n        className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-1/2"\n      >\n        <g transform="rotate(90 60 60)">\n          {ticks.map(({ x1, y1, x2, y2, i }) => (\n            <line\n              key={i}\n              x1={x1}\n              y1={y1}\n              x2={x2}\n              y2={y2}\n              stroke="#888"\n              strokeWidth="2"\n              style={{\n                animation: `tickFade ${2 + i * 0.1}s linear infinite`,\n                animationDelay: `${i * 0.1}s`,\n              }}\n            />\n          ))}\n          <line\n            x1="60"\n            y1="60"\n            x2={60 + Math.cos((computedAngle * Math.PI) / 180) * 52}\n            y2={60 + Math.sin((computedAngle * Math.PI) / 180) * 52}\n            stroke={accentColor}\n            strokeWidth="3"\n            strokeLinecap="round"\n            style={{\n              filter: `drop-shadow(0px 0px 4px #${accentColor}88)`,\n              animation: "needlePulse 1s ease-in-out infinite",\n            }}\n          />\n          <circle\n            cx="60"\n            cy="60"\n            r="10"\n            fill="#fff"\n            stroke="#ccc"\n            strokeWidth="2"\n          />\n        </g>\n        <style>\n          {`\n            @keyframes tickFade {\n              0% { opacity: 0.3; }\n              50% { opacity: 1; }\n              100% { opacity: 0.3; }\n            }\n            @keyframes needlePulse {\n              0%, 100% { filter: drop-shadow(0px 0px 4px #${accentColor}88); }\n              50% { filter: drop-shadow(0px 0px 8px #${accentColor}); }\n            }\n          `}\n        </style>\n      </svg>\n    </motion.button>\n  );\n};\n\nexport default CounterButton;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/counter/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "counter-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/counter-button",
  },
  "particles-button": {
    name: "particles-button",
    description: "A button with a particles animation.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/buttons/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/buttons/particles.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\nimport { cn } from "@/lib/utils";\n\nconst DEFAULT_COMPONENT = "button";\n\ntype ParticlesButtonProps<\n  T extends React.ElementType = typeof DEFAULT_COMPONENT,\n> = {\n  as?: T;\n  color?: string;\n  count?: number;\n} & React.ComponentProps<T>;\n\nconst ParticlesButton = <\n  T extends React.ElementType = typeof DEFAULT_COMPONENT,\n>({\n  as,\n  className,\n  color = "white",\n  count = 18,\n  ...props\n}: ParticlesButtonProps<T>) => {\n  const Comp = as || DEFAULT_COMPONENT;\n\n  return (\n    <Comp\n      className={cn(\n        "flex overflow-hidden relative z-10 items-center w-full h-full text-sm text-center text-gray-700 shadow-[inset_0px_0px_2px_0px_#FFFFFF]",\n        className,\n      )}\n      {...props}\n    >\n      <ParticlesBackground color={color} count={count} />\n      {props.children}\n    </Comp>\n  );\n};\n\nexport default ParticlesButton;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/buttons/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-button";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-button",
  },
  "ai-input": {
    name: "ai-input",
    description: "A AI input component.",
    type: "registry:ui",
    dependencies: [
      "motion",
      "lucide-react",
      "class-variance-authority",
      "react-hook-form",
      "zod",
      "zod-resolvers",
    ],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/ai-input/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/ai-input.tsx",
        content:
          '"use client";\n\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport { cn } from "@/lib/utils";\nimport { Loader } from "lucide-react";\nimport React, { KeyboardEvent, useLayoutEffect, useRef, useState } from "react";\nimport { useForm } from "react-hook-form";\nimport { z } from "zod";\n\nfunction useAutosizeTextArea(\n  ref: React.RefObject<HTMLTextAreaElement | null>,\n  value: string,\n  maxRows = 8,\n) {\n  useLayoutEffect(() => {\n    const el = ref.current;\n    if (!el) return;\n\n    const text = typeof value === "string" ? value : "";\n\n    el.style.height = "auto";\n\n    const computed = window.getComputedStyle(el);\n    const lineHeight = parseInt(computed.lineHeight || "24", 10);\n    const maxHeight = lineHeight * maxRows;\n\n    let extraHeight = 0;\n    if (text.length > 0) {\n      const trailingBreaks = text.match(/\\n+$/)?.[0].length ?? 0;\n      extraHeight = Math.max(trailingBreaks - 1, 0) * lineHeight;\n    }\n\n    const newHeight = Math.min(el.scrollHeight + extraHeight, maxHeight);\n    el.style.height = newHeight + "px";\n    el.style.overflowY =\n      el.scrollHeight + extraHeight > maxHeight ? "auto" : "hidden";\n  }, [ref, value, maxRows]);\n}\n\nconst inputSchema = z.object({\n  text: z.string().min(1, "Text is required"),\n});\n\nexport type AiInputProps = {\n  onSend?: (text: string) => Promise<void>;\n  disabled?: boolean;\n  placeholder?: string;\n  maxRows?: number;\n  showCharCount?: boolean;\n  className?: string;\n};\n\nexport default function AiInput({\n  onSend,\n  disabled = false,\n  placeholder = "Ask thumbnail",\n  maxRows = 8,\n  showCharCount = false,\n  className,\n}: AiInputProps) {\n  const [isSending, setIsSending] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement | null>(null);\n\n  const form = useForm<z.infer<typeof inputSchema>>({\n    resolver: zodResolver(inputSchema),\n    defaultValues: { text: "" },\n  });\n\n  const value = form.watch("text", "");\n\n  useAutosizeTextArea(textareaRef, value, maxRows);\n\n  const triggerSend = async (data: z.infer<typeof inputSchema>) => {\n    const trimmed = data.text.trim();\n    if (!trimmed) return;\n    setIsSending(true);\n    try {\n      await onSend?.(trimmed);\n      form.reset();\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof inputSchema>) => {\n    void triggerSend(data);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === "Enter" && !e.shiftKey) {\n      e.preventDefault();\n      form.handleSubmit(onSubmit)();\n    }\n  };\n\n  const isDisabled = (type: "textarea" | "button") => {\n    const empty = !value || !value.trim();\n    if (type === "textarea") return disabled || isSending;\n    if (type === "button") return disabled || isSending || empty;\n    return false;\n  };\n\n  const { ref: rhfRef, ...field } = form.register("text");\n  const mergeRefs = (el: HTMLTextAreaElement | null) => {\n    textareaRef.current = el;\n    rhfRef(el);\n  };\n\n  return (\n    <form\n      onSubmit={form.handleSubmit(onSubmit)}\n      className={cn(\n        "relative w-full border border-zinc-300 dark:border-zinc-700 rounded-2xl p-3 bg-white dark:bg-zinc-900 flex flex-col gap-2 transition-colors",\n        className,\n      )}\n    >\n      <div className="flex items-end gap-2">\n        <textarea\n          ref={mergeRefs}\n          {...field}\n          className="flex-1 resize-none bg-transparent outline-none text-primary placeholder-zinc-400 text-base leading-6 max-h-[40vh]"\n          placeholder={placeholder}\n          disabled={isDisabled("textarea")}\n          rows={1}\n          onKeyDown={handleKeyDown}\n        />\n\n        <button\n          type="submit"\n          disabled={isDisabled("button")}\n          className="p-2 rounded-full disabled:opacity-40 disabled:cursor-not-allowed hover:bg-indigo-600 hover:text-white bg-indigo-500 text-white transition-colors"\n          aria-label="Send"\n        >\n          {isSending ? (\n            <Loader className="w-5 h-5 animate-spin" />\n          ) : (\n            <svg\n              xmlns="http://www.w3.org/2000/svg"\n              viewBox="0 0 24 24"\n              fill="none"\n              stroke="currentColor"\n              strokeWidth="2"\n              strokeLinecap="round"\n              strokeLinejoin="round"\n              className="w-5 h-5"\n            >\n              <path d="M22 2 11 13" />\n              <path d="m22 2-7 20-4-9-9-4Z" />\n            </svg>\n          )}\n        </button>\n      </div>\n\n      {showCharCount && (\n        <div className="text-xs text-zinc-400 self-end mt-1">\n          {value.length} characters\n        </div>\n      )}\n    </form>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/ai-input/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "ai-input";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/ai-input",
  },
  card: {
    name: "card",
    description: "A card component.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/card/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/card.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { HTMLMotionProps, motion } from "motion/react";\nimport * as React from "react";\nimport { useRef, useState } from "react";\n\nconst DEFAULT_COMPONENT = "button";\n\ntype CardProps = HTMLMotionProps<"div"> & {\n  image: string;\n};\n\nfunction Card({ className, image, ...props }: CardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [pos, setPos] = useState({ x: 0, y: 0 });\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const card = cardRef.current;\n    if (!card) return;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left - rect.width / 2;\n    const y = e.clientY - rect.top - rect.height / 2;\n    const strength = 0.08;\n    setPos({ x: x * strength, y: y * strength });\n  };\n\n  const handleMouseLeave = () => {\n    setPos({ x: 0, y: 0 });\n  };\n\n  return (\n    <div\n      data-slot="card"\n      className="flex justify-center items-center p-2 rounded-3xl shadow-sm bg-white/20 backdrop-blur-xs"\n    >\n      <motion.div\n        ref={cardRef}\n        className={cn(\n          "relative w-[300px] bg-cover bg-center flex flex-col gap-4 p-6 rounded-2xl shadow-[inset_0px_0px_3px_0px_#FFFFFF]",\n          className,\n        )}\n        style={{\n          backgroundImage: `url(${image})`,\n        }}\n        animate={{ x: pos.x, y: pos.y }}\n        transition={{ type: "spring", stiffness: 400, damping: 40, mass: 1 }}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CardGradient({\n  className,\n  fromBlur = 40,\n  fromColor = "rgba(255, 255, 255, 0.5)",\n  fromOpacity = 40,\n  toBlur = 70,\n  toColor = "rgba(0, 0, 0, 0)",\n  toOpacity = 70,\n  ...props\n}: React.ComponentProps<"div"> & {\n  fromBlur?: number;\n  toBlur?: number;\n  fromColor?: string;\n  toColor?: string;\n  fromOpacity?: number;\n  toOpacity?: number;\n}) {\n  return (\n    <div\n      className={cn(\n        "absolute inset-0 rounded-2xl backdrop-blur-xl pointer-events-none",\n        className,\n      )}\n      style={{\n        background: `linear-gradient(to bottom, ${fromColor} ${fromOpacity}%, ${toColor} ${toOpacity}%)`,\n        mask: `linear-gradient(to bottom, rgba(0, 0, 0, 1) ${fromBlur.toString()}%, rgba(0, 0, 0, 0) ${toBlur.toString()}%)`,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CardIndicator({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-indicator"\n      className={cn(\n        "rounded-full border border-gray-200 bg-white/30 backdrop-blur-xs w-fit",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-header"\n      className={cn(\n        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-1 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-title"\n      className={cn("font-semibold leading-none", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-description"\n      className={cn("text-sm text-muted-foreground", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<"div">) {\n  return (\n    <div\n      data-slot="card-content"\n      className={cn("px-1", className)}\n      {...props}\n    />\n  );\n}\n\ntype CardFooterProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> = {\n  as?: T;\n  radius?: number;\n  blur?: number;\n  childClassName?: string;\n} & React.ComponentProps<T>;\n\nfunction CardFooter<T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  as,\n  className,\n  ...props\n}: CardFooterProps<T>) {\n  const Comp = as || DEFAULT_COMPONENT;\n\n  return (\n    <motion.div\n      data-slot="card-footer"\n      className="flex overflow-hidden relative justify-center items-center p-1 mt-20 rounded-xl backdrop-blur-sm bg-white/20 shadow-[inset_0px_0px_2px_0px_#FFFFFF]"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <Comp\n        className={cn(\n          "flex overflow-hidden relative z-10 items-center w-full h-full text-sm text-center text-gray-700 shadow-[inset_0px_0px_2px_0px_#FFFFFF]",\n          className,\n        )}\n        {...props}\n      >\n        {props.children}\n      </Comp>\n    </motion.div>\n  );\n}\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardGradient,\n  CardHeader,\n  CardIndicator,\n  CardTitle,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/card/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "card";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/card",
  },
  "loading-bar": {
    name: "loading-bar",
    description: "A loading bar with a gradient background.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/loading-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/loading-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { CheckCircleIcon } from "lucide-react";\nimport { AnimatePresence, motion } from "motion/react";\n\ninterface LoadingBarProps {\n  color?: string;\n  completed?: boolean;\n  finishedComponentClassName?: string;\n  finishedComponent?: React.ReactNode;\n  indicator?: string;\n  loadingClassName?: string;\n  progress: number;\n}\n\nconst LoadingBar = ({\n  color = "#000",\n  completed = false,\n  finishedComponentClassName,\n  finishedComponent,\n  indicator,\n  loadingClassName,\n  progress,\n}: LoadingBarProps) => {\n  return (\n    <div className="relative w-full h-full">\n      <AnimatePresence mode="wait">\n        {!completed ? (\n          <>\n            <div\n              key="bar"\n              className="relative w-full h-2 bg-gray-200 rounded-full dark:bg-gray-800"\n            >\n              <motion.div\n                initial={{ width: 0 }}\n                animate={{ width: `${progress}%` }}\n                className="h-full rounded-full transition-all duration-300"\n                style={{ background: color }}\n              />\n              <span\n                className={cn(\n                  "absolute top-0 right-0 z-10 text-xs font-medium text-black -translate-y-full",\n                  loadingClassName,\n                )}\n              >\n                {progress}%\n              </span>\n            </div>\n            {indicator && (\n              <span className="mt-1 text-xs text-gray-400">{indicator}</span>\n            )}\n          </>\n        ) : (\n          <motion.div\n            key="icon"\n            initial={{ opacity: 0, scale: 0.8, y: 10, rotate: 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0, rotate: 360 }}\n            exit={{ opacity: 0, scale: 0.8, y: -10, rotate: 0 }}\n            transition={{\n              type: "spring",\n              stiffness: 260,\n              damping: 20,\n              duration: 1,\n            }}\n            className={cn(\n              "flex justify-center items-center",\n              finishedComponentClassName,\n            )}\n          >\n            {finishedComponent || <CheckCircleIcon className="size-6" />}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default LoadingBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/loading-bar/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "loading-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/loading-bar",
  },
  "number-mosaic": {
    name: "number-mosaic",
    description: "A number mosaic component.",
    type: "registry:ui",
    dependencies: [],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/number-mosaic/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/number-mosaic.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport React, { useEffect, useMemo, useState } from "react";\n\nexport interface NumberMosaicProps\n  extends React.HTMLAttributes<HTMLPreElement> {\n  value: number | string;\n  random?: boolean;\n  className?: string;\n  gap?: number;\n  charset?: string;\n}\n\nconst DIGIT_PATTERNS: Record<string, string[]> = {\n  "0": ["11111", "10001", "10001", "10001", "10001", "10001", "11111"],\n  "1": ["00100", "01100", "00100", "00100", "00100", "00100", "01110"],\n  "2": ["11111", "00001", "00001", "11111", "10000", "10000", "11111"],\n  "3": ["11111", "00001", "00001", "11111", "00001", "00001", "11111"],\n  "4": ["10001", "10001", "10001", "11111", "00001", "00001", "00001"],\n  "5": ["11111", "10000", "10000", "11111", "00001", "00001", "11111"],\n  "6": ["11111", "10000", "10000", "11111", "10001", "10001", "11111"],\n  "7": ["11111", "00001", "00001", "00010", "00100", "01000", "01000"],\n  "8": ["11111", "10001", "10001", "11111", "10001", "10001", "11111"],\n  "9": ["11111", "10001", "10001", "11111", "00001", "00001", "11111"],\n  "-": ["00000", "00000", "00000", "11111", "00000", "00000", "00000"],\n  " ": Array(7).fill("00000"),\n  ".": ["00000", "00000", "00000", "00000", "00000", "00100", "00100"],\n};\n\nconst ROWS = DIGIT_PATTERNS["0"].length;\n\nfunction randomChar(charset: string): string {\n  if (!charset) return "#";\n  const idx = Math.floor(Math.random() * charset.length);\n  return charset.charAt(idx);\n}\n\nexport function buildNumberMosaic(\n  value: number | string,\n  random: boolean = false,\n  gap: number = 1,\n  charset: string = "0123456789",\n): string {\n  const str = String(value);\n  const lineParts: string[][] = Array.from({ length: ROWS }, () => []);\n\n  for (let i = 0; i < str.length; i++) {\n    const ch = str[i];\n    const pattern = DIGIT_PATTERNS[ch] ?? DIGIT_PATTERNS[" "];\n    for (let r = 0; r < ROWS; r++) {\n      const patRow = pattern[r];\n      let outRow = "";\n      for (let c = 0; c < patRow.length; c++) {\n        if (patRow[c] === "1") {\n          outRow += random ? randomChar(charset) : ch;\n        } else {\n          outRow += " ";\n        }\n      }\n      lineParts[r].push(outRow);\n    }\n\n    if (i < str.length - 1) {\n      const spacer = " ".repeat(Math.max(0, gap));\n      for (let r = 0; r < ROWS; r++) {\n        lineParts[r].push(spacer);\n      }\n    }\n  }\n\n  return lineParts.map((chunks) => chunks.join("")).join("\\n");\n}\n\nexport const NumberMosaic: React.FC<NumberMosaicProps> = ({\n  value,\n  random = false,\n  gap = 1,\n  className,\n  charset = "0123456789",\n  ...props\n}) => {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const mosaic = useMemo(\n    () => buildNumberMosaic(value, random && isClient, gap, charset),\n    [value, random, gap, charset, isClient],\n  );\n\n  return (\n    <pre\n      aria-label={String(value)}\n      className={cn("whitespace-pre leading-none", className)}\n      {...props}\n    >\n      {mosaic}\n    </pre>\n  );\n};\n\nexport default NumberMosaic;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/components/number-mosaic/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "number-mosaic";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/number-mosaic",
  },
  "objective-bar": {
    name: "objective-bar",
    description: "A bar that displays the current objective.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/objective-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/objective-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { PackageIcon } from "lucide-react";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\ninterface ObjectiveBarProps {\n  startLabel?: string;\n  endLabel?: string;\n  bgColor?: string;\n  accentColor?: string;\n  icon?: React.ElementType;\n  steps?: number;\n  currentStep?: number;\n  children: React.ReactNode;\n}\n\nconst ObjectiveBar = ({\n  startLabel,\n  endLabel,\n  bgColor,\n  accentColor,\n  icon: Icon = PackageIcon,\n  steps = 4,\n  currentStep: currentStepProp = 2,\n  children,\n}: ObjectiveBarProps) => {\n  const [currentStep, setCurrentStep] = React.useState<number>(0);\n  const currentStepRef = React.useRef<HTMLDivElement>(null);\n  const points = Array.from({ length: steps }, (_, i) => i);\n  const primaryColor = React.useMemo(() => bgColor || "#000", [bgColor]);\n  const secondaryColor = React.useMemo(\n    () => accentColor || "#fff",\n    [accentColor],\n  );\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setCurrentStep(currentStepProp);\n    }, 1000);\n  }, [currentStepProp]);\n\n  return (\n    <div className="flex flex-col gap-2 w-full rounded-lg p-2">\n      <div\n        className="relative w-full h-6 rounded-full border"\n        style={{\n          background: primaryColor,\n        }}\n      >\n        {startLabel && (\n          <span\n            className="absolute left-2 top-1/2 -translate-y-1/2 text-muted text-xs z-20"\n            style={{\n              color: currentStep === 0 ? secondaryColor : primaryColor,\n            }}\n          >\n            {startLabel}\n          </span>\n        )}\n        <motion.div\n          className="absolute h-full rounded-l-full"\n          style={{\n            background: secondaryColor,\n          }}\n          animate={{ width: `calc(${(currentStep / (steps - 1)) * 100}%)` }}\n          transition={{ type: "spring", stiffness: 120, damping: 20 }}\n        />\n        <motion.div\n          ref={currentStepRef}\n          className={cn(\n            "absolute top-1/2 -translate-y-1/2 shadow-sm flex items-center justify-center rounded-full p-2 z-30 border",\n            currentStep !== 0 && "-translate-x-1/2",\n          )}\n          style={{\n            background: secondaryColor,\n          }}\n          animate={{\n            left: `calc(${(currentStep / (steps - 1)) * 100}% - 2px)`,\n          }}\n          transition={{ type: "spring", stiffness: 120, damping: 20 }}\n        >\n          <Icon className="size-6" style={{ color: primaryColor }} />\n        </motion.div>\n        {endLabel && (\n          <span\n            className="absolute right-2 top-1/2 -translate-y-1/2 text-muted text-xs z-20"\n            style={{\n              color: currentStep !== steps ? secondaryColor : primaryColor,\n            }}\n          >\n            {endLabel}\n          </span>\n        )}\n        {points.length > 2 &&\n          points.slice(1, -1).map((point, index) => (\n            <span\n              key={point}\n              className="absolute top-1/2 -translate-y-1/2 z-10 rounded-full size-1 transition-all duration-300"\n              style={{\n                left: `calc(${(point / (steps - 1)) * 100}% - 2px)`,\n                background: index < currentStep ? primaryColor : secondaryColor,\n              }}\n            />\n          ))}\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default ObjectiveBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/components/objective-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "objective-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/objective-bar",
  },
  signature: {
    name: "signature",
    description: "A signature card component.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/signature/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/signature.tsx",
        content:
          '"use client";\n\nimport { Button } from "@/components/ui/button";\nimport { cn } from "@/lib/utils";\nimport {\n  CheckIcon,\n  Pen,\n  RotateCcwIcon,\n  KeyIcon as SignatureIcon,\n  X,\n} from "lucide-react";\nimport {\n  AnimatePresence,\n  type HTMLMotionProps,\n  LayoutGroup,\n  motion,\n} from "motion/react";\nimport * as React from "react";\n\nenum SignatureState {\n  START = "start",\n  WRITING = "writing",\n  END = "end",\n}\n\ninterface SignaturePadProps {\n  width: number;\n  height: number;\n  strokeStyle?: string;\n  lineWidth?: number;\n  className?: string;\n}\n\ntype SignaturePadHandle = {\n  clear: () => void;\n  toDataURL: (type?: string, quality?: number) => string;\n  isEmpty: () => boolean;\n};\n\nconst SignaturePad = React.forwardRef<SignaturePadHandle, SignaturePadProps>(\n  ({ width, height, strokeStyle = "#000", lineWidth = 2, className }, ref) => {\n    const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n    const ctxRef = React.useRef<CanvasRenderingContext2D | null>(null);\n    const drawing = React.useRef(false);\n\n    React.useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      canvas.width = width * 2;\n      canvas.height = height * 2;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n\n      const ctx = canvas.getContext("2d");\n      if (!ctx) return;\n      ctx.scale(2, 2);\n      ctx.lineCap = "round";\n      ctx.strokeStyle = strokeStyle;\n      ctx.lineWidth = lineWidth;\n      ctxRef.current = ctx;\n    }, [width, height, strokeStyle, lineWidth]);\n\n    const getPos = (\n      e: React.MouseEvent | React.TouchEvent,\n    ): { x: number; y: number } => {\n      const rect = canvasRef.current!.getBoundingClientRect();\n      const pt =\n        "touches" in e\n          ? (e as React.TouchEvent).touches[0]\n          : (e as React.MouseEvent);\n      return { x: pt.clientX - rect.left, y: pt.clientY - rect.top };\n    };\n\n    const handleDown = (e: React.MouseEvent | React.TouchEvent) => {\n      drawing.current = true;\n      const { x, y } = getPos(e);\n      ctxRef.current?.beginPath();\n      ctxRef.current?.moveTo(x, y);\n    };\n\n    const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n      if (!drawing.current) return;\n      const { x, y } = getPos(e);\n      ctxRef.current?.lineTo(x, y);\n      ctxRef.current?.stroke();\n    };\n\n    const handleUp = () => {\n      drawing.current = false;\n    };\n\n    React.useImperativeHandle(ref, () => ({\n      clear: () => ctxRef.current?.clearRect(0, 0, width, height),\n      toDataURL: (type = "image/png", quality?: number) =>\n        canvasRef.current!.toDataURL(type, quality),\n      isEmpty: () => {\n        const blank = document.createElement("canvas");\n        blank.width = width;\n        blank.height = height;\n        return blank.toDataURL() === canvasRef.current!.toDataURL();\n      },\n    }));\n\n    return (\n      <canvas\n        ref={canvasRef}\n        className={cn("touch-none", className)}\n        onMouseDown={handleDown}\n        onMouseMove={handleMove}\n        onMouseUp={handleUp}\n        onMouseLeave={handleUp}\n        onTouchStart={handleDown}\n        onTouchMove={handleMove}\n        onTouchEnd={handleUp}\n      />\n    );\n  },\n);\nSignaturePad.displayName = "SignaturePad";\n\ninterface SignatureProps extends HTMLMotionProps<"div"> {\n  width?: number;\n  height?: number;\n  strokeStyle?: string;\n  lineWidth?: number;\n  className?: string;\n  preview?: boolean;\n  onFinish?: (dataUrl: string) => void;\n  onClear?: () => void;\n  onStart?: () => void;\n  onSignature?: () => void;\n  onCancel?: () => void;\n}\n\nexport const Signature = ({\n  className,\n  width = 128,\n  height = 128,\n  preview = false,\n  strokeStyle = "#000",\n  lineWidth = 2,\n  onFinish,\n  onClear,\n  onStart,\n  onSignature,\n  onCancel,\n  ...props\n}: SignatureProps) => {\n  const [signatureState, setSignatureState] = React.useState<SignatureState>(\n    SignatureState.START,\n  );\n\n  const padRef = React.useRef<SignaturePadHandle | null>(null);\n  const [signatureDataUrl, setSignatureDataUrl] = React.useState<string | null>(\n    null,\n  );\n\n  const handleStart = () => {\n    setSignatureState(SignatureState.WRITING);\n    onStart?.();\n  };\n\n  const handleSignature = () => {\n    if (!padRef.current || padRef.current.isEmpty()) return;\n    setSignatureDataUrl(padRef.current.toDataURL());\n    setSignatureState(SignatureState.END);\n    onSignature?.();\n  };\n\n  const handleClear = () => {\n    padRef.current?.clear();\n    setSignatureDataUrl(null);\n    onClear?.();\n  };\n\n  const handleCancel = () => {\n    handleClear();\n    setSignatureState(SignatureState.START);\n    onCancel?.();\n  };\n\n  const handleFinish = () => {\n    if (!signatureDataUrl) return;\n    onFinish?.(signatureDataUrl);\n  };\n\n  return (\n    <LayoutGroup id="signature">\n      <motion.div layout className={className} {...props}>\n        <AnimatePresence mode="wait" initial={false}>\n          {signatureState === SignatureState.START && (\n            <motion.div\n              key="start"\n              layoutId="signature-button"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{\n                type: "spring",\n                stiffness: 150,\n                bounce: 0.6,\n              }}\n            >\n              <Button onClick={handleStart} className="w-full">\n                <SignatureIcon className="size-4 mr-2" />\n                Start Signing\n              </Button>\n            </motion.div>\n          )}\n\n          {signatureState === SignatureState.WRITING && (\n            <motion.div\n              key="writing"\n              layout\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: "auto" }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.15, ease: "easeInOut" }}\n              className="flex flex-col items-center justify-center p-4 rounded-lg border-2 border-dashed border-primary/50 bg-background"\n            >\n              <div className="flex items-center justify-between gap-4 w-full">\n                <button\n                  className="p-2 aspect-square cursor-pointer"\n                  onClick={handleClear}\n                >\n                  <RotateCcwIcon className="size-4" />\n                </button>\n                <span className="text-sm font-medium text-muted-foreground">\n                  Sign here\n                </span>\n                <button\n                  className="p-2 aspect-square cursor-pointer"\n                  onClick={handleCancel}\n                >\n                  <X className="size-4" />\n                </button>\n              </div>\n\n              <div className="w-full h-32 relative">\n                <SignaturePad\n                  ref={padRef as React.Ref<SignaturePadHandle>}\n                  width={width}\n                  height={height}\n                  strokeStyle={strokeStyle}\n                  lineWidth={lineWidth}\n                  className="absolute inset-0 w-full h-full"\n                />\n              </div>\n\n              <motion.div\n                layoutId="signature-button"\n                className="w-full"\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: "spring", stiffness: 150 }}\n              >\n                <Button className="w-full" onClick={handleSignature}>\n                  <CheckIcon className="size-4 mr-2" />\n                  Finish Signing\n                </Button>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {signatureState === SignatureState.END && (\n            <motion.div\n              key="end"\n              className="flex items-center gap-2"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.1 }}\n            >\n              <motion.div\n                layoutId="signature-button"\n                className="flex-1"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                transition={{ type: "spring", stiffness: 150 }}\n              >\n                <Button\n                  className="w-full"\n                  variant="default"\n                  onClick={handleFinish}\n                >\n                  <CheckIcon className="size-4 mr-2" />\n                  Signature Complete\n                </Button>\n              </motion.div>\n\n              <motion.button\n                onClick={() => setSignatureState(SignatureState.WRITING)}\n                className="aspect-square cursor-pointer border-1 rounded-lg p-2.5"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                transition={{ type: "spring", stiffness: 150 }}\n              >\n                <Pen className="size-5" />\n              </motion.button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {signatureState === SignatureState.END &&\n          signatureDataUrl &&\n          preview && (\n            <motion.div\n              className="mt-4 p-2 border rounded bg-muted/50"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.05, duration: 0.15 }}\n            >\n              {/* eslint-disable-next-line @next/next/no-img-element */}\n              <img\n                src={signatureDataUrl}\n                alt="Signature preview"\n                className="w-full h-16 object-contain"\n              />\n            </motion.div>\n          )}\n      </motion.div>\n    </LayoutGroup>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/signature/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "signature";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/signature",
  },
  "step-bar": {
    name: "step-bar",
    description: "A step bar with a gradient background.",
    type: "registry:ui",
    dependencies: ["motion", "lucide-react", "class-variance-authority"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/step-bar.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport { AnimatePresence, motion } from "motion/react";\nimport * as React from "react";\n\nconst DEFAULT_COMPONENT = "div";\n\ninterface StepBarProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> {\n  color?: string;\n  containerClassName?: string;\n  currentStep: number;\n  finished?: boolean;\n  lastStepVisible?: boolean;\n  onCurrentStepHover?: (index: number) => void;\n  onCurrentStepLeave?: () => void;\n  onStepHover?: (index: number) => void;\n  onStepLeave?: () => void;\n  tooltipClassName?: string;\n  tooltipContent?: (index: number) => string;\n  tooltipKeepVisible?: boolean;\n  size?: "sm" | "md" | "lg";\n  steps: number;\n  stepClassName?: string;\n  stepComponent?: T;\n}\n\nconst StepBar = <T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  color = "#000",\n  containerClassName,\n  currentStep,\n  finished = false,\n  lastStepVisible = true,\n  onCurrentStepHover,\n  onCurrentStepLeave,\n  onStepHover,\n  onStepLeave,\n  tooltipClassName,\n  tooltipContent,\n  tooltipKeepVisible = false,\n  size = "md",\n  steps,\n  stepClassName,\n  stepComponent,\n  ...props\n}: StepBarProps<T>) => {\n  const Component = stepComponent || DEFAULT_COMPONENT;\n\n  const [isTooltipVisible, setIsTooltipVisible] =\n    React.useState(tooltipKeepVisible);\n  const isFinished = React.useMemo(\n    () => finished || currentStep > steps,\n    [finished, currentStep, steps],\n  );\n\n  const getStepColor = React.useCallback(\n    (currentStep: number, index: number, color: string) => {\n      if (isFinished) return { opacity: 1, color };\n\n      if (currentStep < index + 1) {\n        return {\n          opacity: 0.2,\n          color: lastStepVisible ? color : "transparent",\n        };\n      }\n      if (currentStep === index + 1) {\n        return { opacity: 0.5, color };\n      }\n      return { opacity: 1, color };\n    },\n    [isFinished, lastStepVisible],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (index: number, currentStep: number) => {\n      onStepHover?.(index);\n\n      if (isFinished && steps - 1 === index) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n        return;\n      }\n\n      if (index + 1 === currentStep && !isFinished) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n      }\n    },\n    [isFinished, onCurrentStepHover, onStepHover, steps],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (index: number) => {\n      if (!tooltipKeepVisible) {\n        setIsTooltipVisible(false);\n        onStepLeave?.();\n      }\n\n      if (currentStep === index + 1 && !isFinished) {\n        onCurrentStepLeave?.();\n      }\n    },\n    [\n      tooltipKeepVisible,\n      currentStep,\n      isFinished,\n      onStepLeave,\n      onCurrentStepLeave,\n    ],\n  );\n\n  const displayTooltipText = React.useCallback(\n    (index: number) => {\n      if (tooltipContent) return tooltipContent(index);\n\n      if (index === 0) {\n        return "Start";\n      }\n      if (index > steps || isFinished) {\n        return "End";\n      }\n      return `Step ${index + 1}`;\n    },\n    [isFinished, steps, tooltipContent],\n  );\n\n  return (\n    <div\n      className={cn(\n        "flex items-center gap-1 transition-all duration-300",\n        containerClassName,\n      )}\n    >\n      {Array.from({ length: steps }).map((_, index) => {\n        const { opacity, color: stepColor } = getStepColor(\n          currentStep,\n          index,\n          color,\n        );\n\n        return (\n          <div\n            key={index}\n            className={cn(\n              "relative w-10 h-5 transition-all duration-300",\n              size === "sm" && "w-6 h-3",\n              size === "md" && "w-10 h-5",\n              size === "lg" && "w-14 h-7",\n              stepClassName,\n            )}\n          >\n            <Component\n              className={cn(\n                "w-full h-full transition-all duration-300",\n                index === 0 && "rounded-l-full",\n                index === steps - 1 && "rounded-r-full",\n              )}\n              style={{\n                background: stepColor,\n                opacity: opacity,\n                height: "100%",\n                width: "100%",\n              }}\n              onMouseEnter={() => handleMouseEnter(index, currentStep)}\n              onMouseLeave={() => handleMouseLeave(index)}\n              {...props}\n            />\n            {((isFinished && index === steps - 1 && isTooltipVisible) ||\n              (!isFinished &&\n                currentStep === index + 1 &&\n                isTooltipVisible)) && (\n              <AnimatePresence mode="wait">\n                <motion.span\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 10 }}\n                  className={cn(\n                    "absolute -top-[100%] -translate-y-1/2 left-1/2 -translate-x-1/2 z-10 px-2 py-1 rounded-sm bg-black text-white text-xs whitespace-nowrap shadow-lg pointer-events-none",\n                    tooltipClassName,\n                  )}\n                >\n                  {displayTooltipText(index)}\n                </motion.span>\n              </AnimatePresence>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StepBar;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/components/step-bar/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar",
  },
  "wheel-selector": {
    name: "wheel-selector",
    description: "A wheel selector for picking a number.",
    type: "registry:ui",
    dependencies: ["motion"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/components/wheel-selector/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/components/wheel-selector.tsx",
        content:
          '"use client";\n\nimport { cn } from "@/lib/utils";\nimport { animate, motion, useMotionValue } from "motion/react";\nimport * as React from "react";\n\nfunction WheelSelector<T>({\n  className,\n  frameClassName,\n  gap = 14,\n  height = 30,\n  items,\n  numbersContainerClassName,\n  value,\n  width = 36,\n  onChange,\n  renderItem,\n}: {\n  className?: string;\n  frameClassName?: string;\n  gap?: number;\n  height?: number;\n  items: T[];\n  numbersContainerClassName?: string;\n  value?: T;\n  width?: number;\n  onChange?: (value: T) => void;\n  renderItem?: ({\n    item,\n    isSelected,\n  }: {\n    item: T;\n    isSelected: boolean;\n  }) => React.ReactNode;\n}) {\n  const x = useMotionValue(0);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [isGrabbing, setIsGrabbing] = React.useState(false);\n  const [dragProps, setDragProps] = React.useState({});\n\n  const itemWidth = width + gap;\n\n  const selectedIndex = React.useMemo(() => {\n    if (!value) return -1;\n    return items.indexOf(value);\n  }, [items, value]);\n\n  React.useLayoutEffect(() => {\n    if (containerRef.current && selectedIndex !== -1) {\n      const containerCenter = containerRef.current.offsetWidth / 2;\n      const targetX = containerCenter - selectedIndex * itemWidth - width / 2;\n\n      animate(x, targetX, {\n        type: "spring",\n        damping: 30,\n        stiffness: 400,\n      });\n\n      setDragProps({\n        dragConstraints: {\n          right: containerCenter - width / 2,\n          left: containerCenter - (items.length - 1) * itemWidth - width / 2,\n        },\n        dragTransition: {\n          power: 0.1,\n          timeConstant: 250,\n          modifyTarget: (target: number) => {\n            const targetIndex = Math.round(\n              (containerCenter - target - width / 2) / itemWidth,\n            );\n            const clampedIndex = Math.max(\n              0,\n              Math.min(targetIndex, items.length - 1),\n            );\n            const newValue = items[clampedIndex];\n            onChange?.(newValue);\n\n            const newTarget =\n              containerCenter - clampedIndex * itemWidth - width / 2;\n            return newTarget;\n          },\n        },\n      });\n    }\n  }, [items, selectedIndex, itemWidth, x, onChange, width, gap]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        "relative h-16 cursor-grab overflow-hidden",\n        "bg-gradient-to-r from-white/50 via-transparent to-white/50",\n        "dark:from-black/50 dark:via-transparent dark:to-black/50",\n        isGrabbing && "cursor-grabbing",\n        className,\n      )}\n      style={{\n        mask: `linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgb(0, 0, 1) 50%, rgba(0, 0, 0, 0) 100%)`,\n      }}\n    >\n      <motion.div\n        drag="x"\n        style={{\n          x,\n          gap,\n        }}\n        className={cn(\n          "flex absolute top-1/2 items-center -translate-y-1/2",\n          numbersContainerClassName,\n        )}\n        {...dragProps}\n        onDragStart={() => setIsGrabbing(true)}\n        onDragEnd={() => setIsGrabbing(false)}\n      >\n        {items.map((item, index) => {\n          const isSelected = selectedIndex === index;\n\n          return (\n            <div\n              key={index}\n              className="flex-shrink-0"\n              style={{\n                width,\n                height,\n              }}\n            >\n              {renderItem ? (\n                renderItem({ item, isSelected })\n              ) : (\n                <span\n                  className="flex justify-center items-center w-full h-full text-foreground rounded-md transition-opacity"\n                  style={{\n                    opacity: isSelected ? 1 : 0.4,\n                  }}\n                >\n                  {String(item)}\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </motion.div>\n      <div className="absolute inset-0 pointer-events-none">\n        <div\n          className={cn(\n            "absolute top-1/2 left-1/2 rounded-md border-2 -translate-x-1/2 -translate-y-1/2 size-9",\n            "border-neutral-300 dark:border-neutral-600",\n            frameClassName,\n          )}\n          style={{\n            width,\n            height,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WheelSelector;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/components/wheel-selector/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "wheel-selector";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/wheel-selector",
  },
  "sparkles-demo": {
    name: "sparkles-demo",
    description: "Demo showing a sparkle animation.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/sparkle"],
    files: [
      {
        path: "registry/demo/animations/sparkles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/animations/sparkles.tsx",
        content:
          'import Sparkles from "@/components/targetblank/animations/sparkles";\nimport { Button } from "@/components/ui/button";\nimport { useTheme } from "next-themes";\n\nexport const SparklesDemo = () => {\n  const { theme } = useTheme();\n\n  return (\n    <div className="w-fit h-full flex items-center justify-center mx-auto">\n      <Sparkles sparkColor={theme === "dark" ? "#FFF" : "#000"}>\n        <Button variant="outline">Click me</Button>\n      </Sparkles>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/animations/sparkles/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "sparkles-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/sparkles-demo",
  },
  "transfer-demo": {
    name: "transfer-demo",
    description: "Demo showing a transfer animation.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/transfer"],
    files: [
      {
        path: "registry/demo/animations/transfer/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/animations/transfer.tsx",
        content:
          'import { Icons } from "@/components/icons";\nimport Transfer from "@/components/targetblank/animations/transfer";\nimport { useTheme } from "next-themes";\n\nexport const TransferDemo = () => {\n  const { theme } = useTheme();\n\n  return (\n    <Transfer\n      firstChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.gitHub className="size-6 text-black" />\n          </div>\n        </div>\n      }\n      secondChild={\n        <div className="z-10 flex items-center justify-center bg-white border border-gray-100 rounded-md size-10 p-1">\n          <div className=" bg-white shadow-md w-full h-full flex items-center justify-center rounded-md">\n            <Icons.apple className="size-6 text-black" />\n          </div>\n        </div>\n      }\n      color={theme === "dark" ? ["#FFF"] : ["#000"]}\n      animation\n      containerWidth="400px"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/animations/transfer/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "transfer-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/transfer-demo",
  },
  "particles-background-demo": {
    name: "particles-background-demo",
    description: "Demo showing an animated background with particles effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/particles-background"],
    files: [
      {
        path: "registry/demo/backgrounds/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/backgrounds/particles.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\n\nexport const ParticlesBackgroundDemo = () => {\n  return <ParticlesBackground color="#5a5a5a" count={50} />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/backgrounds/particles/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-background-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-background-demo",
  },
  "speed-background-demo": {
    name: "speed-background-demo",
    description: "Demo showing an animated background with speed effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/speed-background"],
    files: [
      {
        path: "registry/demo/backgrounds/speed/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/backgrounds/speed.tsx",
        content:
          'import SpeedBackground from "@/components/targetblank/backgrounds/speed";\n\nexport default function SpeedBackgroundDemo() {\n  return (\n    <SpeedBackground\n      className="w-full h-96 bg-white rounded-xl"\n      count={15}\n      color="black"\n    >\n      <div className="flex items-center justify-center h-full text-3xl font-bold">\n        Speed Mode 💨\n      </div>\n    </SpeedBackground>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/backgrounds/speed/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "speed-background-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/speed-background-demo",
  },
  "copy-button-demo": {
    name: "copy-button-demo",
    description:
      "Demo showing an animated button with copy to clipboard effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/copy-button"],
    files: [
      {
        path: "registry/demo/buttons/copy/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/copy.tsx",
        content:
          'import { CopyButton } from "@/components/targetblank/buttons/copy";\n\nexport const CopyButtonDemo = () => {\n  return <CopyButton variant="outline" content="Content to copy" size="md" />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/copy/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "copy-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/copy-button-demo",
  },
  "counter-button-demo": {
    name: "counter-button-demo",
    description: "Demo showing an animated button with counter effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/counter-button"],
    files: [
      {
        path: "registry/demo/buttons/counter/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/counter.tsx",
        content:
          'import CounterButton from "@/components/targetblank/buttons/counter";\n\nexport default function CounterDemo() {\n  return (\n    <CounterButton\n      durationSeconds={10}\n      onComplete={() => console.log("Completed!")}\n      onClick={() => console.log("Clicked!")}\n      acceleration\n      angleSpread={10}\n    />\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/counter/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "counter-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/counter-button-demo",
  },
  "particles-button-demo": {
    name: "particles-button-demo",
    description: "Demo showing an animated button with particles effect.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/particles-button"],
    files: [
      {
        path: "registry/demo/buttons/particles/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/buttons/particles.tsx",
        content:
          'import ParticlesButton from "@/components/targetblank/buttons/particles";\nimport { StarIcon } from "lucide-react";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\nexport const ParticlesButtonDemo = () => {\n  const [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <ParticlesButton\n      as={motion.button}\n      className="gap-2 p-2 bg-transparent rounded-md border border-muted text-primary w-fit"\n      count={10}\n      color="#5a5a5a"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onClick={() => setIsFilled((prev) => !prev)}\n    >\n      <StarIcon className="size-4" fill={isFilled ? "none" : "currentColor"} />\n      Click me\n    </ParticlesButton>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/buttons/particles/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "particles-button-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/particles-button-demo",
  },
  "ai-input-demo": {
    name: "ai-input-demo",
    description: "Demo showing an AI input component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/ai-input"],
    files: [
      {
        path: "registry/demo/components/ai-input/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/ai-input.tsx",
        content:
          'import AiInput from "@/components/targetblank/components/ai-input";\n\nexport const AiInputDemo = () => {\n  return (\n    <AiInput\n      onSend={async (text) => {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }}\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/ai-input/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "ai-input-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/ai-input-demo",
  },
  "card-demo": {
    name: "card-demo",
    description: "Demo showing a card component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/card"],
    files: [
      {
        path: "registry/demo/components/card/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/card.tsx",
        content:
          'import ParticlesBackground from "@/components/targetblank/backgrounds/particles";\nimport {\n  Card,\n  CardDescription,\n  CardFooter,\n  CardGradient,\n  CardHeader,\n  CardIndicator,\n  CardTitle,\n} from "@/components/targetblank/components/card";\n\nexport const CardDemo = () => {\n  return (\n    <Card\n      image={\n        "https://preview.redd.it/nature-vibes-v0-vhl86w7e60jc1.jpg?width=1080&crop=smart&auto=webp&s=b1553f868c8d46408ac0f2a860f19f8c14793bf4"\n      }\n    >\n      <CardGradient />\n      <CardIndicator className="z-[1]">\n        <div className="flex gap-2 justify-start items-center p-1 w-fit">\n          <div className="bg-lime-400 rounded-full shadow-sm size-1.5 shadow-lime-300" />\n          <span className="text-[9px] text-gray-600 leading-none">\n            New-Reels Instagram Creator\n          </span>\n        </div>\n      </CardIndicator>\n      <CardHeader className="z-[1]">\n        <CardTitle>\n          <div className="flex flex-col gap-1">\n            <span className="text-lime-900">Craft Your</span>\n            <span className="italic font-light text-gray-800">\n              Imaginary Escape\n            </span>\n          </div>\n        </CardTitle>\n        <CardDescription>\n          <span className="text-sm text-lime-800">\n            The leading AI art generation and image editing tool with 3.5B+\n            creations\n          </span>\n        </CardDescription>\n      </CardHeader>\n      <CardFooter\n        as="button"\n        className="px-4 py-2 w-full tracking-tight bg-[#bee227] rounded-lg"\n      >\n        <ParticlesBackground count={10} />\n        <span className="z-10 w-full text-center">Generated Image</span>\n      </CardFooter>\n    </Card>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/components/card/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "card-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/card-demo",
  },
  "loading-bar-demo": {
    name: "loading-bar-demo",
    description: "Demo showing a loading bar with a gradient background.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/loading-bar"],
    files: [
      {
        path: "registry/demo/components/loading-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/loading-bar.tsx",
        content:
          'import LoadingBar from "@/components/targetblank/components/loading-bar";\nimport { useTheme } from "next-themes";\nimport * as React from "react";\n\nexport const LoadingBarDemo = () => {\n  const { theme } = useTheme();\n  const [progress, setProgress] = React.useState(0);\n  const [isComplete, setIsComplete] = React.useState(false);\n  const [elapsedTime, setElapsedTime] = React.useState(0);\n\n  React.useEffect(() => {\n    if (isComplete) {\n      const timer = setTimeout(() => {\n        setProgress(0);\n        setElapsedTime(0);\n        setIsComplete(false);\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n\n    const interval = setInterval(() => {\n      setElapsedTime((t) => t + 1);\n      setProgress((prev) => {\n        if (prev >= 100) {\n          setIsComplete(true);\n          return 100;\n        }\n        const randomStep = Math.floor(Math.random() * 25) + 5;\n        return Math.min(prev + randomStep, 100);\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isComplete]);\n\n  const averageSpeed = elapsedTime > 0 ? progress / elapsedTime : 0;\n  const timeLeft =\n    averageSpeed > 0 ? Math.ceil((100 - progress) / averageSpeed) : 0;\n\n  const indicator =\n    progress < 100 && timeLeft > 0\n      ? `About ${timeLeft} second${timeLeft > 1 ? "s" : ""} remaining...`\n      : elapsedTime > 0\n        ? "Finished"\n        : "Loading...";\n\n  return (\n    <LoadingBar\n      color={theme === "dark" ? "#FFF" : "#000"}\n      progress={progress}\n      indicator={indicator}\n      completed={isComplete}\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/loading-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "loading-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/loading-bar-demo",
  },
  "number-mosaic-demo": {
    name: "number-mosaic-demo",
    description: "Demo showing a number mosaic.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/number-mosaic"],
    files: [
      {
        path: "registry/demo/components/number-mosaic/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/number-mosaic.tsx",
        content:
          '"use client";\n\nimport { NumberMosaic } from "@/components/targetblank/components/number-mosaic";\nimport { useIsMobile } from "@/hooks/use-mobile";\n\nexport const NumberMosaicDemo = () => {\n  const isMobile = useIsMobile();\n  return <NumberMosaic value={isMobile ? 1234 : 123456} random gap={3} />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/number-mosaic/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "number-mosaic-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/number-mosaic-demo",
  },
  "objective-bar-demo": {
    name: "objective-bar-demo",
    description: "Demo showing a objective bar.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/objective-bar"],
    files: [
      {
        path: "registry/demo/components/objective-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/objective-bar.tsx",
        content:
          'import ObjectiveBar from "@/components/targetblank/components/objective-bar";\nimport { CheckIcon, LucideIcon, TruckIcon } from "lucide-react";\nimport { motion } from "motion/react";\nimport * as React from "react";\n\nconst STEPS = 6;\n\nexport const ObjectiveBarDemo = () => {\n  const [currentStep, setCurrentStep] = React.useState<number>(0);\n  const [isFinished, setIsFinished] = React.useState<boolean>(false);\n  const [icon, setIcon] = React.useState<LucideIcon | undefined>(undefined);\n\n  React.useEffect(() => {\n    switch (currentStep) {\n      case 0:\n        setIcon(CheckIcon);\n        break;\n      case 3:\n      case 5:\n        setIcon(TruckIcon);\n        break;\n      default:\n        setIcon(undefined);\n    }\n\n    const interval = setInterval(() => {\n      setCurrentStep((prev) => (STEPS - prev === 1 ? 0 : prev + 1));\n      if (STEPS - currentStep === 1) {\n        setIsFinished(true);\n      } else {\n        setIsFinished(false);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentStep]);\n\n  return (\n    <ObjectiveBar steps={STEPS} currentStep={currentStep} icon={icon}>\n      <div className="flex flex-col gap-2 text-center mt-2">\n        {isFinished ? (\n          <motion.span\n            key="finished"\n            className="text-sm"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.3 }}\n          >\n            All done! 🎉\n          </motion.span>\n        ) : (\n          <motion.span\n            key="not-finished"\n            className="text-sm"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.3 }}\n          >\n            {`Only ${STEPS - currentStep} ${\n              STEPS - currentStep === 1 ? "step" : "steps"\n            } left`}\n          </motion.span>\n        )}\n      </div>\n    </ObjectiveBar>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/objective-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "objective-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/objective-bar-demo",
  },
  "signature-demo": {
    name: "signature-demo",
    description: "Demo showing a signature.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/signature"],
    files: [
      {
        path: "registry/demo/components/signature/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/signature.tsx",
        content:
          '"use client";\n\nimport { Signature } from "@/components/targetblank/components/signature";\nimport { useTheme } from "next-themes";\n\nexport const SignatureDemo = () => {\n  const { theme } = useTheme();\n  return <Signature strokeStyle={theme === "dark" ? "#FFF" : "#000"} />;\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/signature/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "signature-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/signature-demo",
  },
  "step-bar-demo": {
    name: "step-bar-demo",
    description: "Demo showing a step bar with a gradient background.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/step-bar"],
    files: [
      {
        path: "registry/demo/components/step-bar/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/step-bar.tsx",
        content:
          'import StepBar from "@/components/targetblank/components/step-bar";\nimport { useTheme } from "next-themes";\nimport * as React from "react";\n\nexport const StepBarDemo = () => {\n  const { theme } = useTheme();\n  const [mounted, setMounted] = React.useState(false);\n  const [currentStep, setCurrentStep] = React.useState(1);\n  const [isFinished, setIsFinished] = React.useState(false);\n  const TOTAL_STEPS = 5;\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const handleNext = React.useCallback(() => {\n    if (currentStep < TOTAL_STEPS + 1) {\n      setCurrentStep((prev) => prev + 1);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  const handleReset = React.useCallback(() => {\n    setCurrentStep(1);\n    setIsFinished(false);\n  }, []);\n\n  React.useEffect(() => {\n    if (currentStep > TOTAL_STEPS) {\n      setIsFinished(true);\n    }\n  }, [currentStep, TOTAL_STEPS]);\n\n  React.useEffect(() => {\n    setTimeout(\n      () => {\n        if (isFinished) {\n          handleReset();\n        } else {\n          handleNext();\n        }\n      },\n      isFinished ? 3000 : 1500,\n    );\n  }, [isFinished, handleNext, handleReset]);\n\n  const customTooltip = React.useCallback(\n    (index: number) => {\n      const steps = [\n        "Start your journey",\n        "Choose your path",\n        "Learn the basics",\n        "Practice skills",\n        "Master the craft",\n        "You\'re done!",\n      ];\n      if (isFinished && index === TOTAL_STEPS - 1) {\n        return steps[steps.length - 1];\n      }\n      return steps[index];\n    },\n    [isFinished],\n  );\n\n  const color = mounted ? (theme === "dark" ? "#FFF" : "#000") : "#000";\n\n  return (\n    <StepBar\n      color={color}\n      currentStep={currentStep}\n      finished={isFinished}\n      steps={TOTAL_STEPS}\n      tooltipContent={customTooltip}\n      tooltipKeepVisible\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/step-bar/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "step-bar-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/step-bar-demo",
  },
  "wheel-selector-demo": {
    name: "wheel-selector-demo",
    description: "Demo for the wheel selector component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["wheel-selector"],
    files: [
      {
        path: "registry/demo/components/wheel-selector/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/components/wheel-selector.tsx",
        content:
          '"use client";\n\nimport WheelSelector from "@/components/targetblank/components/wheel-selector";\nimport React from "react";\n\nconst WheelSelectorDemo = () => {\n  const numberItems = React.useMemo(() => {\n    const min = 100;\n    const max = 200;\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min);\n  }, []);\n  const [numberValue, setNumberValue] = React.useState(numberItems[43]); // 143\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      const newValue =\n        numberItems[Math.floor(Math.random() * numberItems.length)];\n      setNumberValue(newValue);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [numberItems]);\n\n  const fruitItems = React.useMemo(\n    () => ["Apple", "Banana", "Cherry", "Date", "Elderberry", "Fig", "Grape"],\n    [],\n  );\n  const [fruitValue, setFruitValue] = React.useState(fruitItems[2]);\n\n  return (\n    <div className="flex flex-col gap-8 justify-center items-center">\n      <div>\n        <h3 className="mb-2 font-semibold text-center">Number Selector</h3>\n        <WheelSelector<number>\n          items={numberItems}\n          value={numberValue}\n          onChange={setNumberValue}\n          className="w-48"\n        />\n      </div>\n\n      <div>\n        <h3 className="mb-2 font-semibold text-center">Fruit Selector</h3>\n        <WheelSelector<string>\n          items={fruitItems}\n          value={fruitValue}\n          onChange={setFruitValue}\n          width={100}\n          className="w-80"\n          renderItem={({ item, isSelected }) => (\n            <div\n              className={`flex h-full w-full items-center justify-center rounded-lg font-bold transition-all duration-200 ${\n                isSelected\n                  ? "bg-primary text-primary-foreground shadow-md"\n                  : "bg-muted text-muted-foreground hover:bg-muted/80"\n              }`}\n            >\n              {item}\n            </div>\n          )}\n        />\n        <p className="text-xs text-center text-muted-foreground mt-2">\n          Try to grab it\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default WheelSelectorDemo;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/components/wheel-selector/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "wheel-selector-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/wheel-selector-demo",
  },
  "use-debounce-demo": {
    name: "use-debounce-demo",
    description: "Demo for the useDebounce hook.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/use-debounce"],
    files: [
      {
        path: "registry/demo/hooks/use-debounce/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/hooks/use-debounce.tsx",
        content:
          'import useDebounce from "@/components/targetblank/hooks/use-debounce";\nimport { Input } from "@/components/ui/input";\nimport React, { useState } from "react";\n\nexport default function DebounceDemo() {\n  const [value, setValue] = useState("");\n  const [debouncedValue, setDebouncedValue] = useState("");\n\n  const debouncedUpdate = useDebounce((val: string) => {\n    setDebouncedValue(val);\n  }, 500);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setValue(e.target.value);\n    debouncedUpdate(e.target.value);\n  }\n\n  return (\n    <div className="flex flex-col gap-4 w-[400px]">\n      <Input\n        type="text"\n        value={value}\n        onChange={handleChange}\n        placeholder="Your entry will be debounced after 300ms"\n      />\n      <div className="flex flex-col gap-2">\n        <div className="flex items-center gap-2">\n          <span className="text-sm text-muted-foreground">Instant value :</span>\n          <span className="text-sm">{value}</span>\n        </div>\n        <div className="flex items-center gap-2">\n          <span className="text-sm text-muted-foreground">\n            Debounced value :\n          </span>\n          <span className="text-sm">{debouncedValue}</span>\n        </div>\n      </div>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/hooks/use-debounce/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-debounce-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-debounce-demo",
  },
  "use-online-status-demo": {
    name: "use-online-status-demo",
    description: "Demo for the useOnlineStatus hook.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/use-online-status"],
    files: [
      {
        path: "registry/demo/hooks/use-online-status/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/hooks/use-online-status.tsx",
        content:
          '"use client";\n\nimport React from "react";\n// On suppose que le hook est importable ainsi, sinon ajuster le chemin :\nimport useOnlineStatus from "@/components/targetblank/hooks/use-online-status";\nimport { cn } from "@/lib/utils";\n\nconst OnlineStatusDemo: React.FC = () => {\n  const isOnline = useOnlineStatus();\n\n  return (\n    <div className="flex items-center gap-2">\n      <div\n        className={cn(\n          "size-1.5 rounded-full",\n          isOnline ? "bg-green-400" : "bg-red-400",\n        )}\n      />\n      <span className="text-sm text-muted-foreground">Connection status :</span>\n      <span\n        className={cn(\n          "text-sm font-medium",\n          isOnline ? "text-green-500" : "text-red-500",\n        )}\n      >\n        {isOnline ? "Online" : "Offline"}\n      </span>\n    </div>\n  );\n};\n\nexport default OnlineStatusDemo;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/hooks/use-online-status/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-online-status-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-online-status-demo",
  },
  "use-scroll-position-demo": {
    name: "use-scroll-position-demo",
    description: "Demo for the useScrollPosition hook.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/use-scroll-position"],
    files: [
      {
        path: "registry/demo/hooks/use-scroll-position/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/hooks/use-scroll-position.tsx",
        content:
          '"use client";\n\nimport { useScrollPosition } from "@/components/targetblank/hooks/use-scroll-position";\nimport { Button } from "@/components/ui/button";\nimport {\n  ArrowDownIcon,\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  ArrowUpIcon,\n} from "lucide-react";\nimport * as React from "react";\n\nconst ScrollPositionDemo: React.FC = () => {\n  const { x, y, direction } = useScrollPosition({ throttleDelay: 50 });\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: "smooth" });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({ top: document.body.scrollHeight, behavior: "smooth" });\n  };\n\n  const scrollToLeft = () => {\n    window.scrollTo({ left: 0, behavior: "smooth" });\n  };\n\n  const scrollToRight = () => {\n    window.scrollTo({ left: document.body.scrollWidth, behavior: "smooth" });\n  };\n\n  return (\n    <div className="space-y-4">\n      <div className="grid grid-cols-2 gap-4">\n        <div className="text-center p-3 bg-muted rounded-lg">\n          <div className="text-2xl font-bold">{x}</div>\n          <div className="text-sm text-muted-foreground">X Position</div>\n          {direction.horizontal && (\n            <div className="flex items-center justify-center mt-1">\n              {direction.horizontal === "left" ? (\n                <ArrowLeftIcon className="size-4 text-blue-500" />\n              ) : (\n                <ArrowRightIcon className="size-4 text-blue-500" />\n              )}\n            </div>\n          )}\n        </div>\n        <div className="text-center p-3 bg-muted rounded-lg">\n          <div className="text-2xl font-bold">{y}</div>\n          <div className="text-sm text-muted-foreground">Y Position</div>\n          {direction.vertical && (\n            <div className="flex items-center justify-center mt-1">\n              {direction.vertical === "up" ? (\n                <ArrowUpIcon className="size-4 text-green-500" />\n              ) : (\n                <ArrowDownIcon className="size-4 text-green-500" />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className="flex flex-col gap-2">\n        <Button onClick={scrollToTop} variant="outline" size="sm">\n          Scroll to Top\n        </Button>\n        <Button onClick={scrollToBottom} variant="outline" size="sm">\n          Scroll to Bottom\n        </Button>\n        <Button onClick={scrollToLeft} variant="outline" size="sm">\n          Scroll to Left\n        </Button>\n        <Button onClick={scrollToRight} variant="outline" size="sm">\n          Scroll to Right\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollPositionDemo;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/hooks/use-scroll-position/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-scroll-position-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-scroll-position-demo",
  },
  "use-undo-redo-demo": {
    name: "use-undo-redo-demo",
    description: "Demo for the useUndoRedo hook.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/use-undo-redo"],
    files: [
      {
        path: "registry/demo/hooks/use-undo-redo/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/hooks/use-undo-redo.tsx",
        content:
          '"use client";\n\nimport { useUndoRedo } from "@/components/targetblank/hooks/use-undo-redo";\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { RedoIcon, UndoIcon } from "lucide-react";\nimport * as React from "react";\n\nconst UndoRedoDemo: React.FC = () => {\n  const { state, set, undo, redo, reset, canUndo, canRedo } =\n    useUndoRedo<string>({ initialValue: "" });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    set(e.target.value);\n  };\n\n  return (\n    <div className="flex flex-col gap-4 w-[300px]">\n      <Input\n        value={state}\n        onChange={handleChange}\n        placeholder="Type something..."\n        className="w-full"\n      />\n      <div className="flex flex-col gap-2">\n        <div className="flex items-center gap-2 w-full">\n          <Button\n            variant="outline"\n            className="flex-1"\n            onClick={undo}\n            disabled={!canUndo}\n            type="button"\n          >\n            <UndoIcon className="size-4" />\n          </Button>\n          <Button\n            variant="outline"\n            className="flex-1"\n            onClick={redo}\n            disabled={!canRedo}\n            type="button"\n          >\n            <RedoIcon className="size-4" />\n          </Button>\n        </div>\n        <Button variant="destructive" onClick={() => reset("")} type="button">\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default UndoRedoDemo;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/demo/hooks/use-undo-redo/index.tsx"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-undo-redo-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-undo-redo-demo",
  },
  "bug-text-demo": {
    name: "bug-text-demo",
    description: "Demo for the Bug Text component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/circular-text"],
    files: [
      {
        path: "registry/demo/text/bug/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/text/bug.tsx",
        content:
          'import BugText from "@/components/targetblank/text/bug";\n\nexport default function BugTextDemo() {\n  return <BugText color="#000">Hello world!</BugText>;\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/text/bug/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "bug-text-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/bug-text-demo",
  },
  "circular-text-demo": {
    name: "circular-text-demo",
    description: "Demo for the Circular Text component.",
    type: "registry:ui",
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ["https://targetblank.dev/r/circular-text"],
    files: [
      {
        path: "registry/demo/text/circular/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/demo/text/circular.tsx",
        content:
          'import CircularText from "@/components/targetblank/text/circular";\n\nexport default function CircularTextDemo() {\n  return <CircularText text="This is a circular text" />;\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/demo/text/circular/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "circular-text-demo";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/circular-text-demo",
  },
  "use-debounce-hook": {
    name: "use-debounce-hook",
    description: "Hook for debouncing a function.",
    type: "registry:ui",
    dependencies: [],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/hooks/use-debounce/index.ts",
        type: "registry:ui",
        target: "components/targetblank/hooks/use-debounce/index.tsx",
        content:
          'import * as React from "react";\n\nfunction useDebounce<T>(\n  callback: (...args: T[]) => void,\n  delay = 300,\n): (...args: T[]) => void {\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const debouncedCallback = React.useCallback(\n    (...args: T[]) => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        callback(...args);\n      }, delay);\n    },\n    [callback, delay],\n  );\n\n  return debouncedCallback;\n}\n\nexport default useDebounce;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/hooks/use-debounce/index.ts");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-debounce-hook";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-debounce-hook",
  },
  "use-online-status-hook": {
    name: "use-online-status-hook",
    description: "Hook for checking if the user is online.",
    type: "registry:ui",
    dependencies: [],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/hooks/use-online-status/index.ts",
        type: "registry:ui",
        target: "components/targetblank/hooks/use-online-status/index.tsx",
        content:
          'import * as React from "react";\n\nfunction useOnlineStatus(): boolean {\n  const [isOnline, setIsOnline] = React.useState(() =>\n    typeof navigator !== "undefined" ? navigator.onLine : true,\n  );\n\n  const handleOnline = React.useCallback(() => setIsOnline(true), []);\n  const handleOffline = React.useCallback(() => setIsOnline(false), []);\n\n  React.useEffect(() => {\n    window.addEventListener("online", handleOnline);\n    window.addEventListener("offline", handleOffline);\n\n    return () => {\n      window.removeEventListener("online", handleOnline);\n      window.removeEventListener("offline", handleOffline);\n    };\n  }, [handleOffline, handleOnline]);\n\n  return isOnline;\n}\n\nexport default useOnlineStatus;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/hooks/use-online-status/index.ts");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-online-status-hook";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-online-status-hook",
  },
  "use-scroll-position-hook": {
    name: "use-scroll-position-hook",
    description: "Hook for getting the scroll position of an element.",
    type: "registry:ui",
    dependencies: [],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/hooks/use-scroll-position/index.ts",
        type: "registry:ui",
        target: "components/targetblank/hooks/use-scroll-position/index.tsx",
        content:
          'import * as React from "react";\n\ntype Position = {\n  x: number;\n  y: number;\n};\n\ninterface UseScrollPositionOptions {\n  throttleDelay?: number;\n  element?: HTMLElement | null;\n}\n\nexport function useScrollPosition({\n  throttleDelay = 100,\n  element,\n}: UseScrollPositionOptions = {}) {\n  const [position, setPosition] = React.useState<Position>({ x: 0, y: 0 });\n  const prevPosition = React.useRef<Position>({ x: 0, y: 0 });\n  const timeout = React.useRef<NodeJS.Timeout | null>(null);\n\n  React.useEffect(() => {\n    const target = element ?? window;\n\n    const getScroll = (): Position => {\n      if (element) {\n        return {\n          x: element.scrollLeft,\n          y: element.scrollTop,\n        };\n      } else {\n        return {\n          x: window.scrollX,\n          y: window.scrollY,\n        };\n      }\n    };\n\n    const handleScroll = () => {\n      if (timeout.current) return;\n\n      timeout.current = setTimeout(() => {\n        const currPos = getScroll();\n        setPosition(currPos);\n        prevPosition.current = currPos;\n        timeout.current = null;\n      }, throttleDelay);\n    };\n\n    target.addEventListener("scroll", handleScroll, { passive: true });\n    return () => {\n      target.removeEventListener("scroll", handleScroll);\n      if (timeout.current) clearTimeout(timeout.current);\n    };\n  }, [throttleDelay, element]);\n\n  return {\n    x: position.x,\n    y: position.y,\n    direction: {\n      horizontal:\n        position.x > prevPosition.current.x\n          ? "right"\n          : position.x < prevPosition.current.x\n            ? "left"\n            : null,\n      vertical:\n        position.y > prevPosition.current.y\n          ? "down"\n          : position.y < prevPosition.current.y\n            ? "up"\n            : null,\n    },\n  };\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          "@/registry/hooks/use-scroll-position/index.ts"
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-scroll-position-hook";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-scroll-position-hook",
  },
  "use-undo-redo-hook": {
    name: "use-undo-redo-hook",
    description: "Hook for undo and redo actions.",
    type: "registry:ui",
    dependencies: [],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/hooks/use-undo-redo/index.ts",
        type: "registry:ui",
        target: "components/targetblank/hooks/use-undo-redo/index.tsx",
        content:
          'import * as React from "react";\n\ntype UseUndoRedoOptions<T> = {\n  initialValue: T;\n  maxHistory?: number;\n};\n\nexport function useUndoRedo<T>({\n  initialValue,\n  maxHistory = 100,\n}: UseUndoRedoOptions<T>) {\n  const [past, setPast] = React.useState<T[]>([]);\n  const [present, setPresent] = React.useState<T>(initialValue);\n  const [future, setFuture] = React.useState<T[]>([]);\n\n  const set = React.useCallback(\n    (newValue: T) => {\n      setPast((prev) => {\n        const updated = [...prev, present];\n        return updated.length > maxHistory\n          ? updated.slice(updated.length - maxHistory)\n          : updated;\n      });\n      setPresent(newValue);\n      setFuture([]); // Clear redo history\n    },\n    [present, maxHistory],\n  );\n\n  const undo = React.useCallback(() => {\n    if (past.length === 0) return;\n    const previous = past[past.length - 1];\n    setPast((prev) => prev.slice(0, prev.length - 1));\n    setFuture((f) => [present, ...f]);\n    setPresent(previous);\n  }, [past, present]);\n\n  const redo = React.useCallback(() => {\n    if (future.length === 0) return;\n    const next = future[0];\n    setFuture((f) => f.slice(1));\n    setPast((p) => [...p, present]);\n    setPresent(next);\n  }, [future, present]);\n\n  const reset = React.useCallback((value: T) => {\n    setPast([]);\n    setFuture([]);\n    setPresent(value);\n  }, []);\n\n  return {\n    state: present,\n    set,\n    undo,\n    redo,\n    reset,\n    canUndo: past.length > 0,\n    canRedo: future.length > 0,\n  };\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/hooks/use-undo-redo/index.ts");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "use-undo-redo-hook";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/use-undo-redo-hook",
  },
  "bug-text": {
    name: "bug-text",
    description: "Bug text component.",
    type: "registry:ui",
    dependencies: ["motion"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/text/bug/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/text/bug/index.tsx",
        content:
          'import * as React from "react";\n\ninterface BugTextProps extends React.HTMLAttributes<HTMLCanvasElement> {\n  children: React.ReactNode;\n  fontSize?: number | string;\n  fontWeight?: string | number;\n  fontFamily?: string;\n  color?: string;\n  enableHover?: boolean;\n  baseIntensity?: number;\n  hoverIntensity?: number;\n}\n\nconst BugText: React.FC<BugTextProps> = ({\n  children,\n  fontSize = "clamp(2rem, 8vw, 8rem)",\n  fontWeight = 900,\n  fontFamily = "inherit",\n  color = "#fff",\n  enableHover = true,\n  baseIntensity = 0.18,\n  hoverIntensity = 0.5,\n  ...props\n}) => {\n  const canvasRef = React.useRef<\n    HTMLCanvasElement & { cleanupFuzzyText?: () => void }\n  >(null);\n\n  React.useEffect(() => {\n    let animationFrameId: number;\n    let isCancelled = false;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const init = async () => {\n      if (document.fonts?.ready) {\n        await document.fonts.ready;\n      }\n      if (isCancelled) return;\n\n      const ctx = canvas.getContext("2d");\n      if (!ctx) return;\n\n      const computedFontFamily =\n        fontFamily === "inherit"\n          ? window.getComputedStyle(canvas).fontFamily || "sans-serif"\n          : fontFamily;\n\n      const fontSizeStr =\n        typeof fontSize === "number" ? `${fontSize}px` : fontSize;\n      let numericFontSize: number;\n      if (typeof fontSize === "number") {\n        numericFontSize = fontSize;\n      } else {\n        const temp = document.createElement("span");\n        temp.style.fontSize = fontSize;\n        document.body.appendChild(temp);\n        const computedSize = window.getComputedStyle(temp).fontSize;\n        numericFontSize = parseFloat(computedSize);\n        document.body.removeChild(temp);\n      }\n\n      const text = React.Children.toArray(children).join("");\n\n      const offscreen = document.createElement("canvas");\n      const offCtx = offscreen.getContext("2d");\n      if (!offCtx) return;\n\n      offCtx.font = `${fontWeight} ${fontSizeStr} ${computedFontFamily}`;\n      offCtx.textBaseline = "alphabetic";\n      const metrics = offCtx.measureText(text);\n\n      const actualLeft = metrics.actualBoundingBoxLeft ?? 0;\n      const actualRight = metrics.actualBoundingBoxRight ?? metrics.width;\n      const actualAscent = metrics.actualBoundingBoxAscent ?? numericFontSize;\n      const actualDescent =\n        metrics.actualBoundingBoxDescent ?? numericFontSize * 0.2;\n\n      const textBoundingWidth = Math.ceil(actualLeft + actualRight);\n      const tightHeight = Math.ceil(actualAscent + actualDescent);\n\n      const extraWidthBuffer = 10;\n      const offscreenWidth = textBoundingWidth + extraWidthBuffer;\n\n      offscreen.width = offscreenWidth;\n      offscreen.height = tightHeight;\n\n      const xOffset = extraWidthBuffer / 2;\n      offCtx.font = `${fontWeight} ${fontSizeStr} ${computedFontFamily}`;\n      offCtx.textBaseline = "alphabetic";\n      offCtx.fillStyle = color;\n      offCtx.fillText(text, xOffset - actualLeft, actualAscent);\n\n      const horizontalMargin = 50;\n      const verticalMargin = 0;\n      canvas.width = offscreenWidth + horizontalMargin * 2;\n      canvas.height = tightHeight + verticalMargin * 2;\n      ctx.translate(horizontalMargin, verticalMargin);\n\n      const interactiveLeft = horizontalMargin + xOffset;\n      const interactiveTop = verticalMargin;\n      const interactiveRight = interactiveLeft + textBoundingWidth;\n      const interactiveBottom = interactiveTop + tightHeight;\n\n      let isHovering = false;\n      const fuzzRange = 30;\n\n      const run = () => {\n        if (isCancelled) return;\n        ctx.clearRect(\n          -fuzzRange,\n          -fuzzRange,\n          offscreenWidth + 2 * fuzzRange,\n          tightHeight + 2 * fuzzRange,\n        );\n        const intensity = isHovering ? hoverIntensity : baseIntensity;\n        for (let j = 0; j < tightHeight; j++) {\n          const dx = Math.floor(intensity * (Math.random() - 0.5) * fuzzRange);\n          ctx.drawImage(\n            offscreen,\n            0,\n            j,\n            offscreenWidth,\n            1,\n            dx,\n            j,\n            offscreenWidth,\n            1,\n          );\n        }\n        animationFrameId = window.requestAnimationFrame(run);\n      };\n\n      run();\n\n      const isInsideTextArea = (x: number, y: number) =>\n        x >= interactiveLeft &&\n        x <= interactiveRight &&\n        y >= interactiveTop &&\n        y <= interactiveBottom;\n\n      const handleMouseMove = (e: MouseEvent) => {\n        if (!enableHover) return;\n        const rect = canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        isHovering = isInsideTextArea(x, y);\n      };\n\n      const handleMouseLeave = () => {\n        isHovering = false;\n      };\n\n      const handleTouchMove = (e: TouchEvent) => {\n        if (!enableHover) return;\n        e.preventDefault();\n        const rect = canvas.getBoundingClientRect();\n        const touch = e.touches[0];\n        const x = touch.clientX - rect.left;\n        const y = touch.clientY - rect.top;\n        isHovering = isInsideTextArea(x, y);\n      };\n\n      const handleTouchEnd = () => {\n        isHovering = false;\n      };\n\n      if (enableHover) {\n        canvas.addEventListener("mousemove", handleMouseMove);\n        canvas.addEventListener("mouseleave", handleMouseLeave);\n        canvas.addEventListener("touchmove", handleTouchMove, {\n          passive: false,\n        });\n        canvas.addEventListener("touchend", handleTouchEnd);\n      }\n\n      const cleanup = () => {\n        window.cancelAnimationFrame(animationFrameId);\n        if (enableHover) {\n          canvas.removeEventListener("mousemove", handleMouseMove);\n          canvas.removeEventListener("mouseleave", handleMouseLeave);\n          canvas.removeEventListener("touchmove", handleTouchMove);\n          canvas.removeEventListener("touchend", handleTouchEnd);\n        }\n      };\n\n      canvas.cleanupFuzzyText = cleanup;\n    };\n\n    init();\n\n    return () => {\n      isCancelled = true;\n      window.cancelAnimationFrame(animationFrameId);\n      if (canvas && canvas.cleanupFuzzyText) {\n        canvas.cleanupFuzzyText();\n      }\n    };\n  }, [\n    children,\n    fontSize,\n    fontWeight,\n    fontFamily,\n    color,\n    enableHover,\n    baseIntensity,\n    hoverIntensity,\n  ]);\n\n  return <canvas ref={canvasRef} {...props} />;\n};\n\nexport default BugText;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/text/bug/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "bug-text";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/bug-text",
  },
  "circular-text": {
    name: "circular-text",
    description: "Circular text component.",
    type: "registry:ui",
    dependencies: ["motion"],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: "registry/text/circular/index.tsx",
        type: "registry:ui",
        target: "components/targetblank/text/circular/index.tsx",
        content:
          'import { cn } from "@/lib/utils";\nimport {\n  motion,\n  MotionValue,\n  Transition,\n  useAnimation,\n  useMotionValue,\n} from "motion/react";\nimport * as React from "react";\n\nexport enum OnHover {\n  SLOW_DOWN = "slowDown",\n  SPEED_UP = "speedUp",\n  PAUSE = "pause",\n  GO_BONKERS = "goBonkers",\n}\n\ninterface CircularTextProps {\n  text: string;\n  spinDuration?: number;\n  onHover?: OnHover;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst getRotationTransition = (\n  duration: number,\n  from: number,\n  loop: boolean = true,\n) => ({\n  from,\n  to: from + 360,\n  ease: "linear" as const,\n  duration,\n  type: "tween" as const,\n  repeat: loop ? Infinity : 0,\n});\n\nconst getTransition = (duration: number, from: number) => ({\n  rotate: getRotationTransition(duration, from),\n  scale: {\n    type: "spring" as const,\n    damping: 20,\n    stiffness: 300,\n  },\n});\n\nconst CircularText: React.FC<CircularTextProps> = ({\n  text,\n  spinDuration = 20,\n  onHover = OnHover.SPEED_UP,\n  onClick,\n  className,\n}) => {\n  const displayText = text.endsWith(" ") ? text : text + " ";\n  const letters = Array.from(displayText);\n  const controls = useAnimation();\n  const rotation: MotionValue<number> = useMotionValue(0);\n\n  React.useEffect(() => {\n    const start = rotation.get();\n    controls.start({\n      rotate: start + 360,\n      scale: 1,\n      transition: getTransition(spinDuration, start),\n    });\n  }, [spinDuration, text, onHover, controls, rotation]);\n\n  const handleHoverStart = () => {\n    const start = rotation.get();\n\n    if (!onHover) return;\n\n    let transitionConfig: ReturnType<typeof getTransition> | Transition;\n    let scaleVal = 1;\n\n    switch (onHover) {\n      case OnHover.SLOW_DOWN:\n        transitionConfig = getTransition(spinDuration * 2, start);\n        break;\n      case OnHover.SPEED_UP:\n        transitionConfig = getTransition(spinDuration / 4, start);\n        break;\n      case OnHover.PAUSE:\n        transitionConfig = {\n          rotate: { type: "spring", damping: 20, stiffness: 300 },\n          scale: { type: "spring", damping: 20, stiffness: 300 },\n        };\n        break;\n      case OnHover.GO_BONKERS:\n        transitionConfig = getTransition(spinDuration / 20, start);\n        scaleVal = 0.8;\n        break;\n      default:\n        transitionConfig = getTransition(spinDuration, start);\n    }\n\n    controls.start({\n      rotate: start + 360,\n      scale: scaleVal,\n      transition: transitionConfig,\n    });\n  };\n\n  const handleHoverEnd = () => {\n    const start = rotation.get();\n    controls.start({\n      rotate: start + 360,\n      scale: 1,\n      transition: getTransition(spinDuration, start),\n    });\n  };\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <motion.div\n      className={cn(\n        "relative mx-auto rounded-full w-[200px] h-[200px] font-bold text-primary text-center cursor-pointer origin-center",\n        className,\n      )}\n      style={{ rotate: rotation }}\n      initial={{ rotate: 0 }}\n      animate={controls}\n      onMouseEnter={handleHoverStart}\n      onMouseLeave={handleHoverEnd}\n      onClick={handleClick}\n    >\n      {letters.map((letter, i) => {\n        const rotationDeg = (360 / letters.length) * i;\n        const factor = Math.PI / letters.length;\n        const x = factor * i;\n        const y = factor * i;\n        const transform = `rotateZ(${rotationDeg}deg) translate3d(${x}px, ${y}px, 0)`;\n\n        return (\n          <span\n            key={i}\n            className="absolute inline-block inset-0 top-0 left-0 bottom-0 right-0 text-2xl transition-all duration-500 ease-[cubic-bezier(0,0,0,1)]"\n            style={{ transform, WebkitTransform: transform }}\n          >\n            {letter}\n          </span>\n        );\n      })}\n    </motion.div>\n  );\n};\n\nexport default CircularText;',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import("@/registry/text/circular/index.tsx");
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === "function" || typeof mod[key] === "object",
          ) || "circular-text";
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: "https://targetblank.dev/r/circular-text",
  },
};
