{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "circular-text",
  "type": "registry:ui",
  "title": "Circular Text",
  "description": "Circular text component.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/text/circular/index.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport {\n  motion,\n  MotionValue,\n  Transition,\n  useAnimation,\n  useMotionValue,\n} from \"motion/react\";\nimport * as React from \"react\";\n\nexport enum OnHover {\n  SLOW_DOWN = \"slowDown\",\n  SPEED_UP = \"speedUp\",\n  PAUSE = \"pause\",\n  GO_BONKERS = \"goBonkers\",\n}\n\ninterface CircularTextProps {\n  text: string;\n  spinDuration?: number;\n  onHover?: OnHover;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst getRotationTransition = (\n  duration: number,\n  from: number,\n  loop: boolean = true,\n) => ({\n  from,\n  to: from + 360,\n  ease: \"linear\" as const,\n  duration,\n  type: \"tween\" as const,\n  repeat: loop ? Infinity : 0,\n});\n\nconst getTransition = (duration: number, from: number) => ({\n  rotate: getRotationTransition(duration, from),\n  scale: {\n    type: \"spring\" as const,\n    damping: 20,\n    stiffness: 300,\n  },\n});\n\nconst CircularText: React.FC<CircularTextProps> = ({\n  text,\n  spinDuration = 20,\n  onHover = OnHover.SPEED_UP,\n  onClick,\n  className,\n}) => {\n  const displayText = text.endsWith(\" \") ? text : text + \" \";\n  const letters = Array.from(displayText);\n  const controls = useAnimation();\n  const rotation: MotionValue<number> = useMotionValue(0);\n\n  React.useEffect(() => {\n    const start = rotation.get();\n    controls.start({\n      rotate: start + 360,\n      scale: 1,\n      transition: getTransition(spinDuration, start),\n    });\n  }, [spinDuration, text, onHover, controls, rotation]);\n\n  const handleHoverStart = () => {\n    const start = rotation.get();\n\n    if (!onHover) return;\n\n    let transitionConfig: ReturnType<typeof getTransition> | Transition;\n    let scaleVal = 1;\n\n    switch (onHover) {\n      case OnHover.SLOW_DOWN:\n        transitionConfig = getTransition(spinDuration * 2, start);\n        break;\n      case OnHover.SPEED_UP:\n        transitionConfig = getTransition(spinDuration / 4, start);\n        break;\n      case OnHover.PAUSE:\n        transitionConfig = {\n          rotate: { type: \"spring\", damping: 20, stiffness: 300 },\n          scale: { type: \"spring\", damping: 20, stiffness: 300 },\n        };\n        break;\n      case OnHover.GO_BONKERS:\n        transitionConfig = getTransition(spinDuration / 20, start);\n        scaleVal = 0.8;\n        break;\n      default:\n        transitionConfig = getTransition(spinDuration, start);\n    }\n\n    controls.start({\n      rotate: start + 360,\n      scale: scaleVal,\n      transition: transitionConfig,\n    });\n  };\n\n  const handleHoverEnd = () => {\n    const start = rotation.get();\n    controls.start({\n      rotate: start + 360,\n      scale: 1,\n      transition: getTransition(spinDuration, start),\n    });\n  };\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <motion.div\n      className={cn(\n        \"relative mx-auto rounded-full w-[200px] h-[200px] font-bold text-primary text-center cursor-pointer origin-center\",\n        className,\n      )}\n      style={{ rotate: rotation }}\n      initial={{ rotate: 0 }}\n      animate={controls}\n      onMouseEnter={handleHoverStart}\n      onMouseLeave={handleHoverEnd}\n      onClick={handleClick}\n    >\n      {letters.map((letter, i) => {\n        const rotationDeg = (360 / letters.length) * i;\n        const factor = Math.PI / letters.length;\n        const x = factor * i;\n        const y = factor * i;\n        const transform = `rotateZ(${rotationDeg}deg) translate3d(${x}px, ${y}px, 0)`;\n\n        return (\n          <span\n            key={i}\n            className=\"absolute inline-block inset-0 top-0 left-0 bottom-0 right-0 text-2xl transition-all duration-500 ease-[cubic-bezier(0,0,0,1)]\"\n            style={{ transform, WebkitTransform: transform }}\n          >\n            {letter}\n          </span>\n        );\n      })}\n    </motion.div>\n  );\n};\n\nexport default CircularText;\n",
      "type": "registry:ui",
      "target": "components/targetblank/text/circular/index.tsx"
    }
  ]
}