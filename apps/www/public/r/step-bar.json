{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "step-bar",
  "type": "registry:ui",
  "title": "Step Bar",
  "description": "A step bar with a gradient background.",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/components/step-bar/index.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport * as React from \"react\";\n\nconst DEFAULT_COMPONENT = \"div\";\n\ninterface StepBarProps<T extends React.ElementType = typeof DEFAULT_COMPONENT> {\n  color?: string;\n  containerClassName?: string;\n  currentStep: number;\n  finished?: boolean;\n  lastStepVisible?: boolean;\n  onCurrentStepHover?: (index: number) => void;\n  onCurrentStepLeave?: () => void;\n  onStepHover?: (index: number) => void;\n  onStepLeave?: () => void;\n  tooltipClassName?: string;\n  tooltipContent?: (index: number) => string;\n  tooltipKeepVisible?: boolean;\n  size?: \"sm\" | \"md\" | \"lg\";\n  steps: number;\n  stepClassName?: string;\n  stepComponent?: T;\n}\n\nconst StepBar = <T extends React.ElementType = typeof DEFAULT_COMPONENT>({\n  color = \"#000\",\n  containerClassName,\n  currentStep,\n  finished = false,\n  lastStepVisible = true,\n  onCurrentStepHover,\n  onCurrentStepLeave,\n  onStepHover,\n  onStepLeave,\n  tooltipClassName,\n  tooltipContent,\n  tooltipKeepVisible = false,\n  size = \"md\",\n  steps,\n  stepClassName,\n  stepComponent,\n  ...props\n}: StepBarProps<T>) => {\n  const Component = stepComponent || DEFAULT_COMPONENT;\n\n  const [isTooltipVisible, setIsTooltipVisible] =\n    React.useState(tooltipKeepVisible);\n  const isFinished = React.useMemo(\n    () => finished || currentStep > steps,\n    [finished, currentStep, steps],\n  );\n\n  const getStepColor = React.useCallback(\n    (currentStep: number, index: number, color: string) => {\n      if (isFinished) return { opacity: 1, color };\n\n      if (currentStep < index + 1) {\n        return {\n          opacity: 0.2,\n          color: lastStepVisible ? color : \"transparent\",\n        };\n      }\n      if (currentStep === index + 1) {\n        return { opacity: 0.5, color };\n      }\n      return { opacity: 1, color };\n    },\n    [isFinished, lastStepVisible],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (index: number, currentStep: number) => {\n      onStepHover?.(index);\n\n      if (isFinished && steps - 1 === index) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n        return;\n      }\n\n      if (index + 1 === currentStep && !isFinished) {\n        setIsTooltipVisible(true);\n        onCurrentStepHover?.(index);\n      }\n    },\n    [isFinished, onCurrentStepHover, onStepHover, steps],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (index: number) => {\n      if (!tooltipKeepVisible) {\n        setIsTooltipVisible(false);\n        onStepLeave?.();\n      }\n\n      if (currentStep === index + 1 && !isFinished) {\n        onCurrentStepLeave?.();\n      }\n    },\n    [\n      tooltipKeepVisible,\n      currentStep,\n      isFinished,\n      onStepLeave,\n      onCurrentStepLeave,\n    ],\n  );\n\n  const displayTooltipText = React.useCallback(\n    (index: number) => {\n      if (tooltipContent) return tooltipContent(index);\n\n      if (index === 0) {\n        return \"Start\";\n      }\n      if (index > steps || isFinished) {\n        return \"End\";\n      }\n      return `Step ${index + 1}`;\n    },\n    [isFinished, steps, tooltipContent],\n  );\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center gap-1 transition-all duration-300\",\n        containerClassName,\n      )}\n    >\n      {Array.from({ length: steps }).map((_, index) => {\n        const { opacity, color: stepColor } = getStepColor(\n          currentStep,\n          index,\n          color,\n        );\n\n        return (\n          <div\n            key={index}\n            className={cn(\n              \"relative w-10 h-5 transition-all duration-300\",\n              size === \"sm\" && \"w-6 h-3\",\n              size === \"md\" && \"w-10 h-5\",\n              size === \"lg\" && \"w-14 h-7\",\n              stepClassName,\n            )}\n          >\n            <Component\n              className={cn(\n                \"w-full h-full transition-all duration-300\",\n                index === 0 && \"rounded-l-full\",\n                index === steps - 1 && \"rounded-r-full\",\n              )}\n              style={{\n                background: stepColor,\n                opacity: opacity,\n                height: \"100%\",\n                width: \"100%\",\n              }}\n              onMouseEnter={() => handleMouseEnter(index, currentStep)}\n              onMouseLeave={() => handleMouseLeave(index)}\n              {...props}\n            />\n            {((isFinished && index === steps - 1 && isTooltipVisible) ||\n              (!isFinished &&\n                currentStep === index + 1 &&\n                isTooltipVisible)) && (\n              <AnimatePresence mode=\"wait\">\n                <motion.span\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 10 }}\n                  className={cn(\n                    \"absolute -top-[100%] -translate-y-1/2 left-1/2 -translate-x-1/2 z-10 px-2 py-1 rounded-sm bg-black text-white text-xs whitespace-nowrap shadow-lg pointer-events-none\",\n                    tooltipClassName,\n                  )}\n                >\n                  {displayTooltipText(index)}\n                </motion.span>\n              </AnimatePresence>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StepBar;\n",
      "type": "registry:ui",
      "target": "components/targetblank/components/step-bar.tsx"
    }
  ]
}