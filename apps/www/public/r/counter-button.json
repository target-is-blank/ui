{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "counter-button",
  "type": "registry:ui",
  "title": "Counter Button",
  "description": "A button with a counter animation.",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/buttons/counter/index.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { HTMLMotionProps, motion } from \"motion/react\";\nimport * as React from \"react\";\n\ninterface CounterTimerProps extends HTMLMotionProps<\"button\"> {\n  acceleration?: boolean;\n  accentColor?: string;\n  angleSpread?: number;\n  disabled?: boolean;\n  durationSeconds: number;\n  label?: string;\n  needleAngle?: number;\n  maxAngle?: number;\n  minAngle?: number;\n  onClick?: () => void;\n  onComplete?: () => void;\n  tickCount?: number;\n}\n\nconst CounterButton = ({\n  durationSeconds,\n  label,\n  accentColor = \"#FFA726\",\n  onComplete,\n  onClick,\n  needleAngle: needleAngleProp = 90,\n  minAngle: minAngleProp = 0,\n  maxAngle: maxAngleProp = 180,\n  acceleration = false,\n  angleSpread = 15,\n  tickCount = 12,\n  disabled = false,\n  className,\n  ...props\n}: CounterTimerProps) => {\n  const [remaining, setRemaining] = React.useState<number>(durationSeconds);\n  const [needleAngle, setNeedleAngle] = React.useState<number>(needleAngleProp);\n  const [targetAngle, setTargetAngle] = React.useState<number>(needleAngleProp);\n  const [isDisabled, setIsDisabled] = React.useState<boolean>(disabled);\n  const [isFinished, setIsFinished] = React.useState<boolean>(false);\n\n  const spread = React.useMemo(() => angleSpread ?? 15, [angleSpread]);\n  const minAngle = React.useMemo(() => {\n    if (minAngleProp !== 0) return minAngleProp;\n    const randomOffset = Math.random() * (2 * spread) - spread;\n    return Math.max(0, needleAngleProp - spread + randomOffset);\n  }, [minAngleProp, needleAngleProp, spread]);\n  const maxAngle = React.useMemo(() => {\n    if (maxAngleProp !== 180) return maxAngleProp;\n    const randomOffset = Math.random() * (2 * spread) - spread;\n    return Math.min(180, needleAngleProp + spread + randomOffset);\n  }, [maxAngleProp, needleAngleProp, spread]);\n\n  const ticks = React.useMemo(\n    () =>\n      Array.from({ length: tickCount }).map((_, i) => {\n        const a = (i / (tickCount - 1)) * Math.PI;\n        const x1 = (60 + Math.cos(a) * 40).toFixed(3);\n        const y1 = (60 + Math.sin(a) * 40).toFixed(3);\n        const x2 = (60 + Math.cos(a) * 56).toFixed(3);\n        const y2 = (60 + Math.sin(a) * 56).toFixed(3);\n        return { x1, y1, x2, y2, i };\n      }),\n    [tickCount],\n  );\n\n  const minutes = React.useMemo(() => Math.floor(remaining / 60), [remaining]);\n  const seconds = React.useMemo(() => remaining % 60, [remaining]);\n\n  const computedAngle = React.useMemo(\n    () =>\n      acceleration ? needleAngle : 180 - (remaining / durationSeconds) * 180,\n    [needleAngle, remaining, durationSeconds, acceleration],\n  );\n\n  React.useEffect(() => {\n    if (remaining <= 0) {\n      setIsDisabled(true);\n      setRemaining(0);\n      setIsFinished(true);\n      if (onComplete) onComplete();\n      return;\n    }\n    setIsFinished(false);\n    const interval = setInterval(() => {\n      setRemaining((prev) => (prev > 0 ? prev - 1 : 0));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [remaining, onComplete]);\n\n  React.useEffect(() => {\n    if (!isFinished) return;\n    let frame: number;\n    const animateTo45 = () => {\n      setNeedleAngle((prev) => {\n        const target = 45;\n        const diff = target - prev;\n        if (Math.abs(diff) < 0.5) return target;\n        return prev + diff * 0.15;\n      });\n      frame = requestAnimationFrame(animateTo45);\n    };\n    frame = requestAnimationFrame(animateTo45);\n    return () => cancelAnimationFrame(frame);\n  }, [isFinished]);\n\n  React.useEffect(() => {\n    if (!acceleration || isDisabled || isFinished) return;\n    const interval = setInterval(() => {\n      const range = maxAngle - minAngle;\n      const randomProgress = Math.random();\n      const newTarget = minAngle + range * randomProgress;\n      setTargetAngle(newTarget);\n    }, 500);\n    return () => clearInterval(interval);\n  }, [acceleration, minAngle, maxAngle, isDisabled, isFinished]);\n\n  React.useEffect(() => {\n    if (!acceleration || isFinished) return;\n    let frame: number;\n    const animate = () => {\n      setNeedleAngle((prev) => {\n        const diff = targetAngle - prev;\n        if (Math.abs(diff) < 0.5) return targetAngle;\n        return prev + diff * 0.15;\n      });\n      frame = requestAnimationFrame(animate);\n    };\n    frame = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(frame);\n  }, [acceleration, isDisabled, targetAngle, isFinished]);\n\n  return (\n    <motion.button\n      onClick={onClick}\n      className={cn(\n        \"relative overflow-hidden flex items-center justify-center shadow-sm bg-primary text-secondary disabled:opacity-80 disabled:!text-muted-foreground border border-gray-800 rounded-lg py-2 pl-4 pr-[90px] transition-all duration-300\",\n        className,\n      )}\n      whileHover={{ scale: isDisabled ? 1 : 1.05 }}\n      whileTap={{ scale: isDisabled ? 1 : 0.95 }}\n      disabled={isDisabled}\n      {...props}\n    >\n      <div className=\"flex-1 flex flex-col items-start justify-center\">\n        <div className=\"flex items-baseline gap-2\">\n          <div className=\"flex items-baseline gap-1\">\n            <motion.span\n              className=\"text-xl md:text-2xl font-bold tabular-nums\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, ease: \"easeOut\" }}\n            >\n              {minutes}\n            </motion.span>\n            <span className=\"text-md md:text-lg text-gray-500\">M</span>\n          </div>\n          <div className=\"flex items-baseline gap-1\">\n            <span className=\"text-xl md:text-2xl font-bold tabular-nums\">\n              {seconds.toString().padStart(2, \"0\")}\n            </span>\n            <span className=\"text-md md:text-lg text-gray-500\">S</span>\n          </div>\n        </div>\n        {label && (\n          <span className=\"text-gray-500 font-medium text-sm md:text-md\">\n            {label}\n          </span>\n        )}\n      </div>\n      {/* Gauge */}\n      <svg\n        width=\"120\"\n        height=\"120\"\n        viewBox=\"0 0 120 120\"\n        className=\"absolute right-0 top-1/2 -translate-y-1/2 translate-x-1/2\"\n      >\n        <g transform=\"rotate(90 60 60)\">\n          {ticks.map(({ x1, y1, x2, y2, i }) => (\n            <line\n              key={i}\n              x1={x1}\n              y1={y1}\n              x2={x2}\n              y2={y2}\n              stroke=\"#888\"\n              strokeWidth=\"2\"\n              style={{\n                animation: `tickFade ${2 + i * 0.1}s linear infinite`,\n                animationDelay: `${i * 0.1}s`,\n              }}\n            />\n          ))}\n          <line\n            x1=\"60\"\n            y1=\"60\"\n            x2={60 + Math.cos((computedAngle * Math.PI) / 180) * 52}\n            y2={60 + Math.sin((computedAngle * Math.PI) / 180) * 52}\n            stroke={accentColor}\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            style={{\n              filter: `drop-shadow(0px 0px 4px #${accentColor}88)`,\n              animation: \"needlePulse 1s ease-in-out infinite\",\n            }}\n          />\n          <circle\n            cx=\"60\"\n            cy=\"60\"\n            r=\"10\"\n            fill=\"#fff\"\n            stroke=\"#ccc\"\n            strokeWidth=\"2\"\n          />\n        </g>\n        <style>\n          {`\n            @keyframes tickFade {\n              0% { opacity: 0.3; }\n              50% { opacity: 1; }\n              100% { opacity: 0.3; }\n            }\n            @keyframes needlePulse {\n              0%, 100% { filter: drop-shadow(0px 0px 4px #${accentColor}88); }\n              50% { filter: drop-shadow(0px 0px 8px #${accentColor}); }\n            }\n          `}\n        </style>\n      </svg>\n    </motion.button>\n  );\n};\n\nexport default CounterButton;\n",
      "type": "registry:ui",
      "target": "components/targetblank/buttons/counter.tsx"
    }
  ]
}