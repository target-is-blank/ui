{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "signature",
  "type": "registry:ui",
  "title": "Signature",
  "description": "A signature card component.",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/components/signature/index.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  CheckIcon,\n  Pen,\n  RotateCcwIcon,\n  KeyIcon as SignatureIcon,\n  X,\n} from \"lucide-react\";\nimport {\n  AnimatePresence,\n  type HTMLMotionProps,\n  LayoutGroup,\n  motion,\n} from \"motion/react\";\nimport * as React from \"react\";\n\nenum SignatureState {\n  START = \"start\",\n  WRITING = \"writing\",\n  END = \"end\",\n}\n\ninterface SignaturePadProps {\n  width: number;\n  height: number;\n  strokeStyle?: string;\n  lineWidth?: number;\n  className?: string;\n}\n\ntype SignaturePadHandle = {\n  clear: () => void;\n  toDataURL: (type?: string, quality?: number) => string;\n  isEmpty: () => boolean;\n};\n\nconst SignaturePad = React.forwardRef<SignaturePadHandle, SignaturePadProps>(\n  ({ width, height, strokeStyle = \"#000\", lineWidth = 2, className }, ref) => {\n    const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n    const ctxRef = React.useRef<CanvasRenderingContext2D | null>(null);\n    const drawing = React.useRef(false);\n\n    React.useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      canvas.width = width * 2;\n      canvas.height = height * 2;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n      ctx.scale(2, 2);\n      ctx.lineCap = \"round\";\n      ctx.strokeStyle = strokeStyle;\n      ctx.lineWidth = lineWidth;\n      ctxRef.current = ctx;\n    }, [width, height, strokeStyle, lineWidth]);\n\n    const getPos = (\n      e: React.MouseEvent | React.TouchEvent,\n    ): { x: number; y: number } => {\n      const rect = canvasRef.current!.getBoundingClientRect();\n      const pt =\n        \"touches\" in e\n          ? (e as React.TouchEvent).touches[0]\n          : (e as React.MouseEvent);\n      return { x: pt.clientX - rect.left, y: pt.clientY - rect.top };\n    };\n\n    const handleDown = (e: React.MouseEvent | React.TouchEvent) => {\n      drawing.current = true;\n      const { x, y } = getPos(e);\n      ctxRef.current?.beginPath();\n      ctxRef.current?.moveTo(x, y);\n    };\n\n    const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n      if (!drawing.current) return;\n      const { x, y } = getPos(e);\n      ctxRef.current?.lineTo(x, y);\n      ctxRef.current?.stroke();\n    };\n\n    const handleUp = () => {\n      drawing.current = false;\n    };\n\n    React.useImperativeHandle(ref, () => ({\n      clear: () => ctxRef.current?.clearRect(0, 0, width, height),\n      toDataURL: (type = \"image/png\", quality?: number) =>\n        canvasRef.current!.toDataURL(type, quality),\n      isEmpty: () => {\n        const blank = document.createElement(\"canvas\");\n        blank.width = width;\n        blank.height = height;\n        return blank.toDataURL() === canvasRef.current!.toDataURL();\n      },\n    }));\n\n    return (\n      <canvas\n        ref={canvasRef}\n        className={cn(\"touch-none\", className)}\n        onMouseDown={handleDown}\n        onMouseMove={handleMove}\n        onMouseUp={handleUp}\n        onMouseLeave={handleUp}\n        onTouchStart={handleDown}\n        onTouchMove={handleMove}\n        onTouchEnd={handleUp}\n      />\n    );\n  },\n);\nSignaturePad.displayName = \"SignaturePad\";\n\ninterface SignatureProps extends HTMLMotionProps<\"div\"> {\n  width?: number;\n  height?: number;\n  strokeStyle?: string;\n  lineWidth?: number;\n  className?: string;\n  preview?: boolean;\n  onFinish?: (dataUrl: string) => void;\n  onClear?: () => void;\n  onStart?: () => void;\n  onSignature?: () => void;\n  onCancel?: () => void;\n}\n\nexport const Signature = ({\n  className,\n  width = 128,\n  height = 128,\n  preview = false,\n  strokeStyle = \"#000\",\n  lineWidth = 2,\n  onFinish,\n  onClear,\n  onStart,\n  onSignature,\n  onCancel,\n  ...props\n}: SignatureProps) => {\n  const [signatureState, setSignatureState] = React.useState<SignatureState>(\n    SignatureState.START,\n  );\n\n  const padRef = React.useRef<SignaturePadHandle | null>(null);\n  const [signatureDataUrl, setSignatureDataUrl] = React.useState<string | null>(\n    null,\n  );\n\n  const handleStart = () => {\n    setSignatureState(SignatureState.WRITING);\n    onStart?.();\n  };\n\n  const handleSignature = () => {\n    if (!padRef.current || padRef.current.isEmpty()) return;\n    setSignatureDataUrl(padRef.current.toDataURL());\n    setSignatureState(SignatureState.END);\n    onSignature?.();\n  };\n\n  const handleClear = () => {\n    padRef.current?.clear();\n    setSignatureDataUrl(null);\n    onClear?.();\n  };\n\n  const handleCancel = () => {\n    handleClear();\n    setSignatureState(SignatureState.START);\n    onCancel?.();\n  };\n\n  const handleFinish = () => {\n    if (!signatureDataUrl) return;\n    onFinish?.(signatureDataUrl);\n  };\n\n  return (\n    <LayoutGroup id=\"signature\">\n      <motion.div layout className={className} {...props}>\n        <AnimatePresence mode=\"wait\" initial={false}>\n          {signatureState === SignatureState.START && (\n            <motion.div\n              key=\"start\"\n              layoutId=\"signature-button\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{\n                type: \"spring\",\n                stiffness: 150,\n                bounce: 0.6,\n              }}\n            >\n              <Button onClick={handleStart} className=\"w-full\">\n                <SignatureIcon className=\"size-4 mr-2\" />\n                Start Signing\n              </Button>\n            </motion.div>\n          )}\n\n          {signatureState === SignatureState.WRITING && (\n            <motion.div\n              key=\"writing\"\n              layout\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: \"auto\" }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.15, ease: \"easeInOut\" }}\n              className=\"flex flex-col items-center justify-center p-4 rounded-lg border-2 border-dashed border-primary/50 bg-background\"\n            >\n              <div className=\"flex items-center justify-between gap-4 w-full\">\n                <button\n                  className=\"p-2 aspect-square cursor-pointer\"\n                  onClick={handleClear}\n                >\n                  <RotateCcwIcon className=\"size-4\" />\n                </button>\n                <span className=\"text-sm font-medium text-muted-foreground\">\n                  Sign here\n                </span>\n                <button\n                  className=\"p-2 aspect-square cursor-pointer\"\n                  onClick={handleCancel}\n                >\n                  <X className=\"size-4\" />\n                </button>\n              </div>\n\n              <div className=\"w-full h-32 relative\">\n                <SignaturePad\n                  ref={padRef as React.Ref<SignaturePadHandle>}\n                  width={width}\n                  height={height}\n                  strokeStyle={strokeStyle}\n                  lineWidth={lineWidth}\n                  className=\"absolute inset-0 w-full h-full\"\n                />\n              </div>\n\n              <motion.div\n                layoutId=\"signature-button\"\n                className=\"w-full\"\n                whileTap={{ scale: 0.95 }}\n                transition={{ type: \"spring\", stiffness: 150 }}\n              >\n                <Button className=\"w-full\" onClick={handleSignature}>\n                  <CheckIcon className=\"size-4 mr-2\" />\n                  Finish Signing\n                </Button>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {signatureState === SignatureState.END && (\n            <motion.div\n              key=\"end\"\n              className=\"flex items-center gap-2\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.1 }}\n            >\n              <motion.div\n                layoutId=\"signature-button\"\n                className=\"flex-1\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                transition={{ type: \"spring\", stiffness: 150 }}\n              >\n                <Button\n                  className=\"w-full\"\n                  variant=\"default\"\n                  onClick={handleFinish}\n                >\n                  <CheckIcon className=\"size-4 mr-2\" />\n                  Signature Complete\n                </Button>\n              </motion.div>\n\n              <motion.button\n                onClick={() => setSignatureState(SignatureState.WRITING)}\n                className=\"aspect-square cursor-pointer border-1 rounded-lg p-2.5\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                transition={{ type: \"spring\", stiffness: 150 }}\n              >\n                <Pen className=\"size-5\" />\n              </motion.button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {signatureState === SignatureState.END &&\n          signatureDataUrl &&\n          preview && (\n            <motion.div\n              className=\"mt-4 p-2 border rounded bg-muted/50\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.05, duration: 0.15 }}\n            >\n              {/* eslint-disable-next-line @next/next/no-img-element */}\n              <img\n                src={signatureDataUrl}\n                alt=\"Signature preview\"\n                className=\"w-full h-16 object-contain\"\n              />\n            </motion.div>\n          )}\n      </motion.div>\n    </LayoutGroup>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/targetblank/components/signature.tsx"
    }
  ]
}