{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-input",
  "type": "registry:ui",
  "title": "AI Input",
  "description": "A AI input component.",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority",
    "react-hook-form",
    "zod",
    "zod-resolvers"
  ],
  "files": [
    {
      "path": "registry/components/ai-input/index.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Loader, Send } from \"lucide-react\";\nimport { motion } from \"motion/react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\n\nfunction useAutosizeTextArea(\n  ref: React.RefObject<HTMLTextAreaElement | null>,\n  value: string,\n  maxRows = 8,\n) {\n  const mirrorMap = React.useRef<WeakMap<HTMLTextAreaElement, HTMLDivElement>>(\n    new WeakMap(),\n  );\n\n  React.useLayoutEffect(() => {\n    const ta = ref.current;\n    if (!ta) return;\n\n    const text = typeof value === \"string\" ? value : \"\";\n\n    let mirror = mirrorMap.current.get(ta);\n    if (!mirror) {\n      mirror = document.createElement(\"div\");\n      mirror.setAttribute(\"data-ta-mirror\", \"\");\n      mirror.style.position = \"absolute\";\n      mirror.style.top = \"-9999px\";\n      mirror.style.left = \"0\";\n      mirror.style.visibility = \"hidden\";\n      mirror.style.whiteSpace = \"pre-wrap\";\n      mirror.style.wordWrap = \"break-word\";\n      mirror.style.overflowWrap = \"break-word\";\n      document.body.appendChild(mirror);\n      mirrorMap.current.set(ta, mirror);\n    }\n\n    const computed = window.getComputedStyle(ta);\n    const lineHeight = parseInt(computed.lineHeight || \"24\", 10);\n    const maxHeight = lineHeight * maxRows;\n\n    const propsToCopy = [\n      \"fontSize\",\n      \"fontFamily\",\n      \"fontWeight\",\n      \"fontStyle\",\n      \"letterSpacing\",\n      \"textTransform\",\n      \"textIndent\",\n      \"padding\",\n      \"borderWidth\",\n      \"boxSizing\",\n      \"lineHeight\",\n      \"width\",\n    ] as const;\n\n    propsToCopy.forEach((p) => {\n      mirror!.style[p] = computed[p];\n    });\n\n    mirror.style.width = ta.offsetWidth + \"px\";\n\n    let mirrorText = text;\n    if (/\\n$/.test(mirrorText)) {\n      mirrorText += \" \";\n    }\n    if (mirrorText === \"\") {\n      mirrorText = \" \";\n    }\n    mirror.textContent = mirrorText;\n\n    const mirrorHeight = mirror.scrollHeight;\n    const newHeight = Math.min(mirrorHeight, maxHeight);\n\n    ta.style.height = newHeight + \"px\";\n    ta.style.overflowY = mirrorHeight > maxHeight ? \"auto\" : \"hidden\";\n  }, [ref, value, maxRows]);\n\n  React.useEffect(() => {\n    const ta = ref.current;\n    return () => {\n      if (!ta) return;\n      const mirror = mirrorMap.current.get(ta);\n      if (mirror && mirror.parentNode) {\n        mirror.parentNode.removeChild(mirror);\n        mirrorMap.current.delete(ta);\n      }\n    };\n  }, [ref]);\n}\n\nconst inputSchema = z.object({\n  text: z.string().min(1, \"Text is required\"),\n});\n\nexport type AiInputProps = {\n  onSend?: (text: string) => Promise<void>;\n  disabled?: boolean;\n  placeholder?: string;\n  maxRows?: number;\n  showCharCount?: boolean;\n  className?: string;\n};\n\nexport default function AiInput({\n  onSend,\n  disabled = false,\n  placeholder = \"Ask thumbnail\",\n  maxRows = 8,\n  showCharCount = false,\n  className,\n}: AiInputProps) {\n  const [isSending, setIsSending] = React.useState(false);\n  const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n  const form = useForm<z.infer<typeof inputSchema>>({\n    resolver: zodResolver(inputSchema),\n    defaultValues: { text: \"\" },\n  });\n\n  const value = form.watch(\"text\", \"\");\n\n  const isMultiline = React.useMemo(() => {\n    const ta = textareaRef.current;\n    if (!ta) return /\\n/.test(value);\n    const lh = parseInt(getComputedStyle(ta).lineHeight || \"24\", 10);\n    return ta.scrollHeight > lh + 1;\n  }, [value]);\n\n  useAutosizeTextArea(textareaRef, value, maxRows);\n\n  const triggerSend = async (data: z.infer<typeof inputSchema>) => {\n    const trimmed = data.text.trim();\n    if (!trimmed) return;\n    setIsSending(true);\n    try {\n      await onSend?.(trimmed);\n      form.reset();\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof inputSchema>) => {\n    void triggerSend(data);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      form.handleSubmit(onSubmit)();\n    }\n  };\n\n  const isDisabled = (type: \"textarea\" | \"button\") => {\n    const empty = !value || !value.trim();\n    if (type === \"textarea\") return disabled || isSending;\n    if (type === \"button\") return disabled || isSending || empty;\n    return false;\n  };\n\n  const { ref: rhfRef, ...field } = form.register(\"text\");\n  const mergeRefs = (el: HTMLTextAreaElement | null) => {\n    textareaRef.current = el;\n    rhfRef(el);\n  };\n\n  return (\n    <form\n      onSubmit={form.handleSubmit(onSubmit)}\n      className={cn(\n        \"relative w-full border border-zinc-300 dark:border-zinc-700 rounded-2xl p-1 flex flex-col gap-2 transition-colors\",\n        className,\n      )}\n    >\n      <div\n        className={cn(\"flex gap-2\", isMultiline ? \"items-end\" : \"items-center\")}\n      >\n        <textarea\n          ref={mergeRefs}\n          {...field}\n          className=\"pl-2 flex-1 resize-none bg-transparent outline-none text-primary placeholder-zinc-400 text-base leading-6 max-h-[40vh]\"\n          placeholder={placeholder}\n          disabled={isDisabled(\"textarea\")}\n          rows={1}\n          onKeyDown={handleKeyDown}\n        />\n\n        <motion.div layout className=\"flex items-center gap-2\">\n          {showCharCount && (\n            <div className=\"text-xs text-zinc-400 self-end mt-1\">\n              {value.length} characters\n            </div>\n          )}\n          <Button\n            size=\"icon\"\n            type=\"submit\"\n            disabled={isDisabled(\"button\")}\n            aria-label=\"Send\"\n          >\n            {isSending ? <Loader className=\"animate-spin\" /> : <Send />}\n          </Button>\n        </motion.div>\n      </div>\n    </form>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/targetblank/components/ai-input.tsx"
    }
  ]
}