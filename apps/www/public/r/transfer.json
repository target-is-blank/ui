{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transfer",
  "type": "registry:ui",
  "title": "Transfer",
  "description": "A transfer animation.",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority",
    "react-particles-js"
  ],
  "files": [
    {
      "path": "registry/animations/transfer/index.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\n\nfunction randomBetween(a: number, b: number) {\n  return a + Math.random() * (b - a);\n}\n\nexport interface TransferProps {\n  animation?: boolean;\n  color?: string[];\n  containerClassName?: string;\n  containerHeight?: number;\n  direction?: \"right\" | \"left\";\n  delay?: number;\n  duration?: {\n    min: number;\n    max: number;\n  };\n  firstChild: React.ReactNode;\n  maxCurve?: number;\n  opacity?: number;\n  secondChild: React.ReactNode;\n  size?: {\n    min: number;\n    max: number;\n  };\n  speed?: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface Particle {\n  id: number;\n  element: ReactElement;\n  timeoutId: ReturnType<typeof setTimeout>;\n}\n\nfunction Transfer({\n  animation = true,\n  color = [\"#000\"],\n  containerClassName,\n  containerHeight = 40,\n  delay = 40,\n  direction = \"right\",\n  duration = { min: 1.2, max: 1.8 },\n  firstChild,\n  maxCurve = 18,\n  opacity = 1,\n  secondChild,\n  size = { min: 6, max: 12 },\n  speed = { min: 0, max: 1.2 },\n}: TransferProps) {\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const particleId = React.useRef(0);\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (animation) {\n      intervalRef.current = setInterval(() => {\n        const randomSize = randomBetween(size.min, size.max);\n        const generatedMaxCurve = Math.min(\n          maxCurve,\n          (containerHeight - randomSize) / 2,\n        );\n        const randomCurve = randomBetween(\n          -generatedMaxCurve,\n          generatedMaxCurve,\n        );\n        const minTop = Math.max(0, -randomCurve) + 1;\n        const maxTop =\n          Math.min(\n            containerHeight - randomSize,\n            containerHeight - randomSize - randomCurve,\n          ) - 1;\n        const startY = randomBetween(minTop, maxTop);\n        const randomDelay = randomBetween(speed.min, speed.max); // secondes\n        const randomDuration = randomBetween(duration.min, duration.max); // secondes\n        const randomColor = Math.floor(randomBetween(0, color.length)); // random index color picking\n        const id = particleId.current++;\n\n        const style: Record<string, unknown> = {\n          backgroundColor: color[randomColor],\n          opacity,\n          width: `${randomSize}px`,\n          height: `${randomSize}px`,\n          animation: `particle-transfer-${direction} ${randomDuration}s cubic-bezier(.7,.2,.3,1) ${randomDelay}s 1`,\n          [\"--curve\"]: `${randomCurve}px`,\n        };\n        if (direction === \"right\") {\n          style.left = 0;\n          style.top = `${startY}px`;\n        } else if (direction === \"left\") {\n          style.left = `calc(100% - ${randomSize}px)`;\n          style.top = `${startY}px`;\n        }\n\n        const timeoutId = setTimeout(\n          () => {\n            setParticles((prev) => prev.filter((p) => p.id !== id));\n          },\n          (randomDelay + randomDuration) * 1000,\n        );\n\n        const element = (\n          <div\n            key={id}\n            className=\"absolute rounded-full opacity-70\"\n            style={style}\n          />\n        );\n        setParticles((prev) => [...prev, { id, element, timeoutId }]);\n      }, delay);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [\n    containerHeight,\n    speed.max,\n    speed.min,\n    duration.max,\n    duration.min,\n    animation,\n    maxCurve,\n    size.max,\n    size.min,\n    color,\n    opacity,\n    direction,\n    delay,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      setParticles((prev) => {\n        prev.forEach((p) => clearTimeout(p.timeoutId));\n        return [];\n      });\n    };\n  }, []);\n\n  const getKeyframes = () => {\n    switch (direction) {\n      case \"right\":\n        return `\n          @keyframes particle-transfer-right {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(150px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(300px) translateY(0); opacity: 0; }\n          }\n        `;\n      case \"left\":\n        return `\n          @keyframes particle-transfer-left {\n            0% { transform: translateX(0) translateY(0); opacity: 0; }\n            10% { opacity: 1; }\n            50% { transform: translateX(-150px) translateY(var(--curve, 0px)); opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateX(-300px) translateY(0); opacity: 0; }\n          }\n        `;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      <style>{getKeyframes()}</style>\n      <div\n        className={cn(\n          \"flex items-center justify-between w-[300px] relative z-10\",\n          containerClassName,\n        )}\n      >\n        {firstChild}\n\n        <div className=\"absolute left-0 top-0 w-full h-10 rounded-md overflow-hidden pointer-events-none\">\n          {particles.map((p) => p.element)}\n        </div>\n\n        {secondChild}\n      </div>\n    </>\n  );\n}\n\nexport default Transfer;\n",
      "type": "registry:ui",
      "target": "components/targetblank/animations/transfer.tsx"
    }
  ]
}