{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wheel-selector",
  "type": "registry:ui",
  "title": "Wheel Selector",
  "description": "A wheel selector for picking a number.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/wheel-selector/index.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { animate, motion, useMotionValue } from \"motion/react\";\nimport * as React from \"react\";\n\nfunction WheelSelector<T>({\n  className,\n  frameClassName,\n  gap = 14,\n  height = 30,\n  items,\n  numbersContainerClassName,\n  value,\n  width = 36,\n  onChange,\n  renderItem,\n}: {\n  className?: string;\n  frameClassName?: string;\n  gap?: number;\n  height?: number;\n  items: T[];\n  numbersContainerClassName?: string;\n  value?: T;\n  width?: number;\n  onChange?: (value: T) => void;\n  renderItem?: ({\n    item,\n    isSelected,\n  }: {\n    item: T;\n    isSelected: boolean;\n  }) => React.ReactNode;\n}) {\n  const x = useMotionValue(0);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [isGrabbing, setIsGrabbing] = React.useState(false);\n  const [dragProps, setDragProps] = React.useState({});\n\n  const itemWidth = width + gap;\n\n  const selectedIndex = React.useMemo(() => {\n    if (!value) return -1;\n    return items.indexOf(value);\n  }, [items, value]);\n\n  React.useLayoutEffect(() => {\n    if (containerRef.current && selectedIndex !== -1) {\n      const containerCenter = containerRef.current.offsetWidth / 2;\n      const targetX = containerCenter - selectedIndex * itemWidth - width / 2;\n\n      animate(x, targetX, {\n        type: \"spring\",\n        damping: 30,\n        stiffness: 400,\n      });\n\n      setDragProps({\n        dragConstraints: {\n          right: containerCenter - width / 2,\n          left: containerCenter - (items.length - 1) * itemWidth - width / 2,\n        },\n        dragTransition: {\n          power: 0.1,\n          timeConstant: 250,\n          modifyTarget: (target: number) => {\n            const targetIndex = Math.round(\n              (containerCenter - target - width / 2) / itemWidth,\n            );\n            const clampedIndex = Math.max(\n              0,\n              Math.min(targetIndex, items.length - 1),\n            );\n            const newValue = items[clampedIndex];\n            onChange?.(newValue);\n\n            const newTarget =\n              containerCenter - clampedIndex * itemWidth - width / 2;\n            return newTarget;\n          },\n        },\n      });\n    }\n  }, [items, selectedIndex, itemWidth, x, onChange, width, gap]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative h-16 cursor-grab overflow-hidden\",\n        \"bg-gradient-to-r from-white/50 via-transparent to-white/50\",\n        \"dark:from-black/50 dark:via-transparent dark:to-black/50\",\n        isGrabbing && \"cursor-grabbing\",\n        className,\n      )}\n      style={{\n        mask: `linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgb(0, 0, 1) 50%, rgba(0, 0, 0, 0) 100%)`,\n      }}\n    >\n      <motion.div\n        drag=\"x\"\n        style={{\n          x,\n          gap,\n        }}\n        className={cn(\n          \"flex absolute top-1/2 items-center -translate-y-1/2\",\n          numbersContainerClassName,\n        )}\n        {...dragProps}\n        onDragStart={() => setIsGrabbing(true)}\n        onDragEnd={() => setIsGrabbing(false)}\n      >\n        {items.map((item, index) => {\n          const isSelected = selectedIndex === index;\n\n          return (\n            <div\n              key={index}\n              className=\"flex-shrink-0\"\n              style={{\n                width,\n                height,\n              }}\n            >\n              {renderItem ? (\n                renderItem({ item, isSelected })\n              ) : (\n                <span\n                  className=\"flex justify-center items-center w-full h-full text-foreground rounded-md transition-opacity\"\n                  style={{\n                    opacity: isSelected ? 1 : 0.4,\n                  }}\n                >\n                  {String(item)}\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </motion.div>\n      <div className=\"absolute inset-0 pointer-events-none\">\n        <div\n          className={cn(\n            \"absolute top-1/2 left-1/2 rounded-md border-2 -translate-x-1/2 -translate-y-1/2 size-9\",\n            \"border-neutral-300 dark:border-neutral-600\",\n            frameClassName,\n          )}\n          style={{\n            width,\n            height,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WheelSelector;\n",
      "type": "registry:ui",
      "target": "components/targetblank/components/wheel-selector.tsx"
    }
  ]
}